[{"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/index.js":"1","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/Components/GlobalChart.js":"2","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/Components/employeeChart.js":"3","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/HTTP/HTTPS.js":"4","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/HTTP/HTTPS_INTERFACE.js":"5","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/Modals/base.js":"6","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/main.js":"7","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/employee/Fetch/HTTPS.js":"8","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/employee/Fetch/HTTPS_INTERFACE.js":"9","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/employee/main.js":"10","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/HTTP/HTTPS.js":"11","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/HTTP/HTTPS_INTERFACE.js":"12","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ActivationLog.js":"13","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/Base.js":"14","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/Chart.js":"15","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/HardwareManager.js":"16","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ManageProducts.js":"17","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ManageSystem.js":"18","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/OverrideStock.js":"19","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ProductHistory.js":"20","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ProductTracking.js":"21","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ReductionLog.js":"22","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/SetGlobalGlycerin.js":"23","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ShipmentLog.js":"24","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ViewInventory.js":"25","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/manageProdSubViews/CustomProduct.js":"26","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/manageProdSubViews/EditProducts.js":"27","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/manageProdSubViews/EditTokens.js":"28","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/manageProdSubViews/Navbar.js":"29","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/manageProdSubViews/globalGlycerin.js":"30","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/main.js":"31","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/login/login.js":"32","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/pages/_app.js":"33","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/pages/_document.js":"34","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/pages/api/auth/[...nextauth].js":"35","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/pages/index.js":"36","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/employee/components/scheduler.js":"37"},{"size":11157,"mtime":1732723516911,"results":"38","hashOfConfig":"39"},{"size":1231,"mtime":1732723516911,"results":"40","hashOfConfig":"39"},{"size":1675,"mtime":1732723516911,"results":"41","hashOfConfig":"39"},{"size":1470,"mtime":1732723516911,"results":"42","hashOfConfig":"39"},{"size":451,"mtime":1732723516911,"results":"43","hashOfConfig":"39"},{"size":1422,"mtime":1732723516911,"results":"44","hashOfConfig":"39"},{"size":3938,"mtime":1732723516911,"results":"45","hashOfConfig":"39"},{"size":5536,"mtime":1752590433142,"results":"46","hashOfConfig":"39"},{"size":1349,"mtime":1752590433142,"results":"47","hashOfConfig":"39"},{"size":66052,"mtime":1752590433142,"results":"48","hashOfConfig":"39"},{"size":7790,"mtime":1732723746406,"results":"49","hashOfConfig":"39"},{"size":2766,"mtime":1732723516912,"results":"50","hashOfConfig":"39"},{"size":3363,"mtime":1732723516912,"results":"51","hashOfConfig":"39"},{"size":1365,"mtime":1732723516912,"results":"52","hashOfConfig":"39"},{"size":1315,"mtime":1732723516912,"results":"53","hashOfConfig":"39"},{"size":8098,"mtime":1732723516912,"results":"54","hashOfConfig":"39"},{"size":1264,"mtime":1732723516912,"results":"55","hashOfConfig":"39"},{"size":7194,"mtime":1732723516912,"results":"56","hashOfConfig":"39"},{"size":11790,"mtime":1732908841531,"results":"57","hashOfConfig":"39"},{"size":11153,"mtime":1732723516913,"results":"58","hashOfConfig":"39"},{"size":5682,"mtime":1732723516913,"results":"59","hashOfConfig":"39"},{"size":3348,"mtime":1732723516913,"results":"60","hashOfConfig":"39"},{"size":2445,"mtime":1732723516913,"results":"61","hashOfConfig":"39"},{"size":4321,"mtime":1732723516913,"results":"62","hashOfConfig":"39"},{"size":10609,"mtime":1732723516913,"results":"63","hashOfConfig":"39"},{"size":49036,"mtime":1732723516913,"results":"64","hashOfConfig":"39"},{"size":35893,"mtime":1732723516913,"results":"65","hashOfConfig":"39"},{"size":84,"mtime":1732723516913,"results":"66","hashOfConfig":"39"},{"size":1150,"mtime":1732723516913,"results":"67","hashOfConfig":"39"},{"size":69,"mtime":1732723516913,"results":"68","hashOfConfig":"39"},{"size":10222,"mtime":1732723516914,"results":"69","hashOfConfig":"39"},{"size":1055,"mtime":1732723516914,"results":"70","hashOfConfig":"39"},{"size":289,"mtime":1732723516914,"results":"71","hashOfConfig":"39"},{"size":231,"mtime":1732723516914,"results":"72","hashOfConfig":"39"},{"size":2957,"mtime":1732723516914,"results":"73","hashOfConfig":"39"},{"size":409,"mtime":1732723516914,"results":"74","hashOfConfig":"39"},{"size":13263,"mtime":1752590433142,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"labsz4",{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/index.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/Components/GlobalChart.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/Components/employeeChart.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/HTTP/HTTPS.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/HTTP/HTTPS_INTERFACE.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/Modals/base.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/dashboard/main.js",["198"],[],"// DashboardBody.js\nimport React, { useEffect, useState, Suspense } from \"react\";\nimport tw from \"tailwind-styled-components\";\nimport http_handler from \"./HTTP/HTTPS_INTERFACE\";\nimport ChartComponent from \"./Components/employeeChart\";\nimport TopProductsChart from \"./Components/GlobalChart\";\nimport { format, subDays, startOfWeek, endOfWeek } from \"date-fns\";\n\nconst http = new http_handler();\n\nconst CardGrid = tw.div`\n  grid\n  grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4\n  gap-4\n  px-4 py-6\n`;\n\nconst Card = tw.div`\n  bg-white\n  shadow-md\n  rounded-md\n  p-4\n`;\n\nconst SubComponent = tw.div`\n  bg-gray-100\n  rounded-md\n  p-4\n`;\n\nconst DashboardBody = () => {\n  const [metrics, setMetrics] = useState({});\n  const [chartEmployeeData, setEmployeeChartData] = useState([]);\n  const [topProducts, setTopProducts] = useState([]);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [loading, setLoading] = useState(true);\n\n  const getMetrics = async () => {\n    const metrics = await http.getMetrics();\n    console.log(\"Fetched metrics:\", metrics);\n    setMetrics(metrics);\n  };\n\n  const getEmployeeMetrics = async () => {\n    const weeklyStart = currentDate;\n    let weeklyEnd = currentDate;\n    const getDay = currentDate.getDay();\n\n    if (getDay === 0) {\n      weeklyEnd = subDays(currentDate, 6);\n    } else if (getDay === 6) {\n      weeklyEnd = subDays(currentDate, 5);\n    } else if (getDay === 1) {\n      weeklyEnd = currentDate;\n    } else {\n      weeklyEnd = subDays(currentDate, getDay - 1);\n    }\n\n    const metrics = await http.getMetricsHistory(\n      [format(weeklyEnd, \"yyyy-MM-dd\"), format(weeklyStart, \"yyyy-MM-dd\")],\n      \"employee\"\n    );\n    console.log(\"Fetched employee metrics:\", metrics);\n    setEmployeeChartData(metrics.chartReadyData);\n    setTopProducts(metrics.productChartData);\n  };\n\n  useEffect(() => {\n    const init = async () => {\n      setLoading(true);\n      await getMetrics();\n      await getEmployeeMetrics();\n      setLoading(false);\n    };\n    init();\n  }, [currentDate]);\n\n  return (\n    <>\n      <CardGrid>\n        <Card className=\"col-span-1 md:col-span-2 lg:col-span-2 xl:col-span-2 lg:row-span 3 md:row-span-3 xl:row-span-3\">\n          <h2 className=\"text-black\">\n            <h2 className=\"rounded-sm\">Employee Reduction Analysis (Weekly)</h2>\n          </h2>\n          <SubComponent style={{ height: \"94%\" }}>\n            <Suspense fallback={<p style={{ color: \"grey\" }}>loading...</p>}>\n              {!loading && (\n                <ChartComponent\n                  data={chartEmployeeData}\n                  options={{ responsive: true, maintainAspectRatio: false }}\n                />\n              )}\n            </Suspense>\n          </SubComponent>\n        </Card>\n        {/* <Card>\n          <h2 className=\"text-black\">Store Reductions Per Hour</h2>\n          <SubComponent>\n            <p\n              className=\"text-black text-2xl \"\n              style={{ display: \"flex\", alignItems: \"baseline\" }}\n            >\n              {\"N/A\"}{\" \"}\n              <p\n                style={{\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n                  color: \"rgba(0,0,0,0.6)\",\n                  marginLeft: 7,\n                }}\n              >\n                Units/PerHour\n              </p>\n            </p>\n          </SubComponent>\n        </Card> */}\n        <Card className=\"col-span-1 md:col-span-2 lg:col-span-2 xl:col-span-2 lg:row-span 3 md:row-span-3 xl:row-span-3\">\n          <h2 className=\"text-black\">Top 5 Products Today</h2>\n          <SubComponent\n            style={{ height: \"94%\", width: \"100%\", paddingLeft: 10 }}\n          >\n            <Suspense fallback={<p style={{ color: \"grey\" }}>loading...</p>}>\n              {!loading && <TopProductsChart data={topProducts} />}\n            </Suspense>\n          </SubComponent>\n        </Card>\n      </CardGrid>\n    </>\n  );\n};\n\nexport default DashboardBody;\n","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/employee/Fetch/HTTPS.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/employee/Fetch/HTTPS_INTERFACE.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/employee/main.js",["199","200"],[],"import React, { useEffect, useState } from \"react\";\nimport tw from \"tailwind-styled-components\";\nimport { FaTimes, FaPrint, FaEye } from \"react-icons/fa\";\nimport DatePicker from \"react-datepicker\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-pdf/dist/esm/Page/AnnotationLayer.css\";\nimport \"react-pdf/dist/esm/Page/TextLayer.css\";\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\nimport http_handler from \"./Fetch/HTTPS_INTERFACE.js\";\nimport MyCalendar from \"./components/scheduler.js\";\n\nconst https = new http_handler();\n\nconst ModalBackground = tw.div`\n  fixed\n  z-50\n  inset-0\n  bg-gray-900\n  opacity-50\n`;\n\nconst ModalContainer = tw.div`\n  fixed\n  z-50\n  top-1/2\n  left-1/2\n  transform\n  -translate-x-1/2\n  -translate-y-1/2\n  w-3/4\n  h-5/6\n  bg-white\n  rounded-md\n  overflow-y-auto\n`;\n\nconst ModalHeader = tw.div`\n  flex\n  justify-between\n  items-center\n  px-4\n  py-2\n  bg-gray-200\n  border-b\n  border-gray-400\n`;\n\nconst ModalTitle = tw.h2`\n  text-lg\n  font-medium\n`;\n\nconst ModalCloseButton = tw.button`\n  focus:outline-none\n  text-black\n`;\n\nconst CardGrid = tw.div`\n  grid\n  grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4\n  gap-4\n  px-4 py-6\n`;\n\nconst Card = tw.div`\nbg-gradient-to-br from-white to-gray-100\nhover:to-gray-500\n  shadow-md\n  rounded-md\n  p-4\n`;\n\nconst SubComponent = tw.div`\n  bg-gray-100\n  rounded-md\n  p-4\n`;\n\n//third party components\n\nfunction Slider({ value, onChange }) {\n  const handleToggle = () => {\n    onChange(!value);\n  };\n\n  return (\n    <div className=\"relative inline-block w-10 mr-2 align-middle select-none\">\n      <input\n        type=\"checkbox\"\n        name=\"toggle\"\n        id=\"toggle\"\n        className=\"toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer\"\n        checked={value}\n        onChange={handleToggle}\n      />\n      <label\n        htmlFor=\"toggle\"\n        className=\"toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer\"\n      ></label>\n    </div>\n  );\n}\n\nconst AlertCard = ({ title, message }) => {\n  return (\n    <div className=\" h-20 bg-white/60 border-4 border-gray-200/40 rounded-lg mb-1 p-1 animate-pulse\">\n      <h2 className=\"text-md font-medium mb-1\">{title}</h2>\n      <p className=\" text-sm\">{message}</p>\n    </div>\n  );\n};\n\nconst Datepicker = ({ selected, setSelected }) => {\n  const handleChange = (date) => {\n    setSelected(date);\n  };\n\n  return (\n    <DatePicker\n      selected={selected}\n      onChange={handleChange}\n      className=\"border border-gray-300 p-2 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black\"\n    />\n  );\n};\n\nconst PdfViewer = ({ fileBlob }) => {\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [showPrint, setShowPrint] = useState(false);\n\n  const onDocumentLoadSuccess = ({ numPages }) => {\n    setShowPrint(true);\n    setNumPages(numPages);\n  };\n\n  const handlePrint = () => {\n    const pdfUrl = URL.createObjectURL(fileBlob);\n    window.open(pdfUrl);\n    URL.revokeObjectURL(pdfUrl);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center mt-20 border-b-2 border-gray-400/50 py-2\">\n      <div className=\"bg-gray-200 p-4 rounded-md shadow-md my-4\">\n        <Document file={fileBlob} onLoadSuccess={onDocumentLoadSuccess}>\n          <Page pageNumber={pageNumber} size={\"letter\"} />\n        </Document>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        {showPrint && (\n          <button\n            onClick={handlePrint}\n            className=\"bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-md block mx-auto my-4 mr-5 items-center justify-center flex\"\n          >\n            <FaPrint className=\"mr-2\" /> Print\n          </button>\n        )}\n        <div className=\"text-gray-500 flex items-center\">\n          <button\n            onClick={() => setPageNumber(pageNumber - 1)}\n            disabled={pageNumber <= 1}\n            className=\"bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold px-2 py-1 rounded-md mr-2\"\n          >\n            Prev\n          </button>\n          <span className=\"mr-2\">\n            Page {pageNumber} of {numPages}\n          </span>\n\n          <button\n            onClick={() => setPageNumber(pageNumber + 1)}\n            disabled={pageNumber >= numPages}\n            className=\"bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold px-2 py-1 rounded-md\"\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst DropdownButton = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [options, setOptions] = useState(props.data.data);\n\n  // useEffect(() => {\n  //   if (data) {\n  //     setOptions(data);\n  //   }\n  // }, [data]);\n\n  const handleButtonClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleOptionClick = (option) => {\n    props.setData(option);\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      {options.length > 0 && (\n        <div className=\"relative inline-block text-left\">\n          <button\n            type=\"button\"\n            className=\"inline-flex justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-indigo-500\"\n            id=\"options-menu\"\n            aria-haspopup=\"true\"\n            aria-expanded={isOpen ? \"true\" : \"false\"}\n            onClick={handleButtonClick}\n          >\n            {props.dataValue}\n            <svg\n              className=\"-mr-1 ml-2 h-5 w-5\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n              aria-hidden=\"true\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M6.293 6.293a1 1 0 011.414 0L10 8.586l2.293-2.293a1 1 0 011.414 0l.707.707a1 1 0 010 1.414L11.414 10l2.293 2.293a1 1 0 010 1.414l-.707.707a1 1 0 01-1.414 0L10 11.414l-2.293 2.293a1 1 0 01-1.414 0l-.707-.707a1 1 0 010-1.414L8.586 10 6.293 7.707a1 1 0 010-1.414l.707-.707z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n          </button>\n\n          <div\n            className={`${\n              isOpen ? \"block\" : \"hidden\"\n            } absolute z-50 mt-1 w-full bg-white shadow-lg`}\n            aria-labelledby=\"options-menu\"\n            role=\"menu\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            {options.map((option) => (\n              <button\n                key={option}\n                className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 w-full text-left\"\n                role=\"menuitem\"\n                onClick={() => handleOptionClick(option)}\n              >\n                {option}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nconst Employee = () => {\n  const [local_data, set_local_data] = useState({\n    gen_emp_all: [],\n    emp_data: [],\n    emps: [],\n    gen_emps: [],\n    emp_option: [],\n  });\n\n  const getEmployees = async () => {\n    const employees = await https.getEmployees();\n    const run1 = employees.map((employee) => {\n      return { name: employee.NAME, e_id: employee.EMPLOYEE_ID };\n    });\n    run1[run1.length] = { name: \"PRINT_ALL\", e_id: \"PRINT_ALL\" };\n    const run2 = employees.map((employee) => {\n      return { name: employee.NAME, e_id: employee.EMPLOYEE_ID };\n    });\n    const run3 = employees.map((employee) => {\n      return `${employee.NAME}`;\n    });\n    const run4 = employees.map((employee) => {\n      return `${employee.NAME}`;\n    });\n    run4[run4.length] = \"PRINT_ALL\";\n    set_local_data({\n      gen_emp_all: run1,\n      emp_data: run2,\n      emps: run3,\n      gen_emps: run4,\n      emp_option: [\"start\", \"end\"],\n    });\n  };\n\n  useEffect(() => {\n    getEmployees();\n  }, []);\n\n  // states\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [isModalRmOpen, setIsModalRmOpen] = useState(false);\n  const [isModalEditOpen, setIsModalEditOpen] = useState(false);\n  const [isModalGenOpen, setIsModalGenOpen] = useState(false);\n  const [manageEmployeeModal, setManageEmployeeModal] = useState(false);\n  const [scheduleEmployeeModal, setScheduleEmployeeModal] = useState(false);\n\n  //edit modal states\n  const shiftDefault = [\"start\", \"end\"];\n  const [shiftOption, setShiftOption] = useState(\"Select Shift\"); //request option\n  const [employee, setEmployee] = useState(\"Select Employee\");\n  const [selEmployeeData, setSelEmployeeData] = useState(\"\"); //request option\n  const [selectedDate, setSelectedDate] = useState(Date.now()); //request option\n  const [hours, setHours] = useState(1); //request option\n  const [previewData, setPreviewData] = useState([]); //request option\n  const [status, setStatus] = useState(null); //request option\n\n  const [scheduleEmployees, setScheduleEmployees] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState(\"\");\n\n  //Range remove range state\n  const [rangeOption, setRangeOption] = useState(false);\n  const [rangeSelectedStart, setRangeSelectedStart] = useState(Date.now());\n  const [rangeSelectedEnd, setRangeSelectedEnd] = useState(Date.now());\n  const [revertRange, setRevertRange] = useState(false);\n\n  const getScheduleEmployees = async () => {\n    const employees = await https.getEmployees();\n    const formatted_employees = employees.map((employee) => {\n      return { id: employee.EMPLOYEE_ID, name: employee.NAME };\n    });\n    setScheduleEmployees(formatted_employees);\n    setSelectedEmployee(formatted_employees[0].name);\n  };\n\n  useEffect(() => {\n    getScheduleEmployees();\n  }, []);\n\n  const [schedule, setSchedule] = useState({\n    monday: { start: \"\", end: \"\" },\n    tuesday: { start: \"\", end: \"\" },\n    wednesday: { start: \"\", end: \"\" },\n    thursday: { start: \"\", end: \"\" },\n    friday: { start: \"\", end: \"\" },\n    // ... initialize the rest of the days similarly\n  });\n\n  \n\n  const handleSubmit = () => {\n    if (\n      !selectedEmployee &&\n      !schedule.monday.start &&\n      !schedule.monday.end &&\n      !schedule.tuesday.start &&\n      !schedule.tuesday.end &&\n      !schedule.wednesday.start &&\n      !schedule.wednesday.end &&\n      !schedule.thursday.start &&\n      !schedule.thursday.end &&\n      !schedule.friday.start &&\n      !schedule.friday.end\n    ) {\n      alert(\"Please fill out all fields\");\n      return;\n    }\n    const employee = scheduleEmployees.filter((employee) => {\n      return employee.name === selectedEmployee;\n    })[0];\n    const data = {\n      employee_id: employee.id,\n      schedule: {\n        mon: [parseInt(schedule.monday.start), parseInt(schedule.monday.end)],\n        tue: [parseInt(schedule.tuesday.start), parseInt(schedule.tuesday.end)],\n        wed: [\n          parseInt(schedule.wednesday.start),\n          parseInt(schedule.wednesday.end),\n        ],\n        thu: [\n          parseInt(schedule.thursday.start),\n          parseInt(schedule.thursday.end),\n        ],\n        fri: [parseInt(schedule.friday.start), parseInt(schedule.friday.end)],\n      },\n    };\n    https.setSchedule(data);\n    alert(\"Schedule Set\");\n    // Here you would typically send the data to the server\n  };\n\n  const daysOfWeek = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"];\n\n  const editPreviewData = async (args) => {\n    if (\n      selEmployeeData != \"Select Employee\" &&\n      selectedDate != null &&\n      shiftOption != \"Select Shift\"\n    ) {\n      const data = await https.preview_transform_shift(args);\n      setPreviewData(data);\n    }\n  };\n  const submitEdit = async (args) => {\n    if (\n      selEmployeeData != \"Select Employee\" &&\n      selectedDate != null &&\n      shiftOption != \"Select Shift\"\n    ) {\n      const data = await https.transform_shift(args);\n      setStatus(data);\n    }\n  };\n\n  //remove modal states\n  const [revert, setRevert] = useState(false);\n\n  const removePreviewData = async (args) => {\n    if (selEmployeeData != \"Select Employee\" && selectedDate != null) {\n      const data = await https.previewRemoveShift(args);\n      setPreviewData(data);\n    }\n  };\n  const submitRemove = async (args) => {\n    if (selEmployeeData != \"Select Employee\" && selectedDate != null) {\n      const data = await https.removeShift(args);\n      setStatus(data);\n    }\n  };\n\n  //pdf modal states\n  const [selectedDate1, setSelectedDate1] = useState(Date.now()); //request option\n  const [selectedDate2, setSelectedDate2] = useState(Date.now()); //request option\n  const [pdfBlob, setPdfBlob] = useState(null); //request option\n\n  const [emp, setEmp] = useState(\"Select Employee\");\n  const [empData, setEmpData] = useState(\"\"); //request option\n  const gen_pdf = async (args) => {\n    if (\n      selectedDate1 != null &&\n      selectedDate2 != null &&\n      emp != \"Select Employee\"\n    ) {\n      const data = await https.pdf_get(args);\n      setPdfBlob(data);\n    }\n  };\n\n  useEffect(() => {\n    if (emp != \"Select Employee\") {\n      const empres = local_data.gen_emp_all.filter((val) => {\n        if (emp == val.name) {\n          return val;\n        }\n      });\n      setEmpData(empres[0].e_id);\n    }\n  }, [emp]);\n\n  useEffect(() => {\n    if (employee != \"Select Employee\") {\n      const emp = local_data.emp_data.filter((val) => {\n        if (employee == val.name) {\n          return val;\n        }\n      });\n      setSelEmployeeData(emp[0].e_id);\n    }\n  }, [employee]);\n\n  // add assignment modal states\n  const [isModalAddOpen, setIsModalAddOpen] = useState(false);\n  const [rangeStart, setRangeStart] = useState(0); //request option\n  const [rangeEnd, setRangeEnd] = useState(0); //request option\n  const [selectedDate3, setSelectedDate3] = useState(Date.now()); //request option\n  const [response, serResponse] = useState(null); //request option\n  const [previewDataAdd, setPreviewDataAdd] = useState({}); //request option\n\n  const submitAdd = async (args) => {\n    const data = await Add_Assigment(args);\n    serResponse(data);\n  };\n\n  useEffect(() => {\n    setPreviewDataAdd({\n      employee: emp ? emp : null,\n      date: selectedDate3 ? selectedDate3 : null,\n      range: [rangeStart ? rangeStart : 0, rangeEnd ? rangeEnd : 0],\n      total: Math.abs(rangeEnd - rangeStart),\n    });\n  }, [rangeStart, rangeEnd, selectedDate3, emp]);\n\n  //edit assignment modal states\n  const [isModalEditAssignOpen, setIsModalEditAssignOpen] = useState(false);\n  const [C_Range, setC_Range] = useState(\"Select Range Option\"); //request option\n  const [previewEditAdd, setPreviewEditAdd] = useState({}); //request option\n  const [transitionEdit, setTransitionEdit] = useState(false); //use this to make buttom ask to pull employee entrys => then select one and populate preview edit add with chosen entry button at this point says modify entry => then val 3 for tahnks for modifying...on close set to 0\n\n  //manage employee modal states\n  const [action, setAction] = useState(false);\n  const [employeeName, setEmployeeName] = useState(\"\");\n  const [employeeEmail, setEmployeeEmail] = useState(\"\");\n  const [employeePhone, setEmployeePhone] = useState(\"\");\n  const [employeeLocation, setEmployeeLocation] = useState(\"\");\n  const [employeeTitle, setEmployeeTitle] = useState(\"\");\n  const [employeeWage, setEmployeeWage] = useState(\"\");\n  const [employeeList, setEmployeeList] = useState([]);\n\n  const [clickedEmployee, setClickedEmployee] = useState(null);\n\n\n\n  const formatHour = (h) => {\n    if (h === \"\" || h === undefined || h === null) return \"\";\n    return h.toString().padStart(2, \"0\") + \":00\";\n  };\n const handleScheduleChange = (day, type) => (event) => {\n   const timeStr = event.target.value; // e.g., \"14:00\"\n   const hour = parseInt(timeStr.split(\":\")[0], 10); // Convert to military hour\n   if (isNaN(hour)) return;\n\n   setSchedule((prev) => ({\n     ...prev,\n     [day]: {\n       ...prev[day],\n       [type]: hour,\n     },\n   }));\n };\n\n\n\n  const init = async () => {\n    const employee_list = await https.getEmployees();\n    const formatted_employee_list = employee_list.map((employee) => {\n      return { ...employee, focus: false };\n    });\n    setEmployeeList(formatted_employee_list);\n  };\n\n  const handleEmployeeAdd = async () => {\n    const data = {\n      name: employeeName,\n      email: employeeEmail,\n      phone: employeePhone,\n      location: employeeLocation,\n      title: employeeTitle,\n      wage: employeeWage,\n    };\n    await https.addEmployee(data);\n    setTimeout(() => {\n      init();\n    }, 500);\n    alert(\"Employee Added\");\n  };\n\n  const handleEmployeeDelete = async () => {\n    const data = {\n      employee_id: clickedEmployee.EMPLOYEE_ID,\n    };\n    await https.deleteEmployee(data);\n    alert(\"Employee Deleted\");\n    setTimeout(() => {\n      init();\n    }, 500);\n  };\n\n  const onFocusEmployee = (emp) => {\n    const focusEvent = employeeList.map((employee) => {\n      if (employee.EMPLOYEE_ID === emp.EMPLOYEE_ID) {\n        return { ...employee, focus: !employee.focus };\n      } else {\n        return { ...employee, focus: false };\n      }\n    });\n    setClickedEmployee(emp.focus ? null : emp);\n    setEmployeeList(focusEvent);\n  };\n  const tableRows = employeeList.map((employee, index) => (\n    <tr\n      key={employee.EMPLOYEE_ID}\n      className={`${\n        employee.focus\n          ? \"bg-green-100\"\n          : index % 2 === 0\n          ? \"bg-gray-100\"\n          : \"bg-white\"\n      }`}\n      onClick={() => onFocusEmployee(employee)}\n    >\n      <td className=\"px-4 py-2 border text-black\">{employee.NAME}</td>\n      <td className=\"px-4 py-2 border text-white bg-lime-900/80\">\n        {employee.EMPLOYEE_ID}\n      </td>\n      <td className=\"px-4 py-2 border text-black\">{employee.TITLE}</td>\n    </tr>\n  ));\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  //remove assignment modal states\n  const [isModalRmAssignOpen, setIsModalRmAssignOpen] = useState(false);\n\n  //view assignment modal states\n  const [isModalViewAssignOpen, setIsModalViewAssignOpen] = useState(false);\n  const [viewScheduler, setViewScheduler] = useState(false);\n\n  const handleModalOpen = (val) => {\n    if (val == \"viewScheduler\") {\n      setViewScheduler(true);\n    }\n    if (val == \"viewAssign\") {\n      setIsModalViewAssignOpen(true);\n    }\n    if (val == \"rmAssign\") {\n      setIsModalRmAssignOpen(true);\n    }\n    if (val == \"editAssign\") {\n      setIsModalEditAssignOpen(true);\n    }\n    if (val == \"add\") {\n      setIsModalAddOpen(true);\n    }\n    if (val == \"edit\") {\n      setIsModalEditOpen(true);\n    }\n    if (val == \"rm\") {\n      setIsModalRmOpen(true);\n    }\n    if (val == \"gen\") {\n      setIsModalGenOpen(true);\n    }\n    if (val == \"manage\") {\n      setManageEmployeeModal(true);\n    }\n    if (val == \"schedule\") {\n      setScheduleEmployeeModal(true);\n    }\n  };\n\n  const handleModalClose = (val) => {\n    if (val == \"viewScheduler\") {\n      setViewScheduler(false);\n    }\n    if (val == \"viewAssign\") {\n      setIsModalViewAssignOpen(false);\n    }\n    if (val == \"rmAssign\") {\n      setIsModalRmAssignOpen(false);\n    }\n    if (val == \"editAssign\") {\n      setIsModalEditAssignOpen(false);\n      setEmp(\"Select Employee\");\n      setSelEmployeeData(\"\");\n      setRangeStart(0);\n      setC_Range(\"Select Range Option\");\n    }\n\n    if (val == \"add\") {\n      setRangeStart(0);\n      setRangeEnd(0);\n      setEmp(\"Select Employee\");\n      setSelEmployeeData(\"\");\n      setIsModalAddOpen(false);\n      setPreviewDataAdd({});\n      setSelectedDate3(Date.now());\n      serResponse(null);\n    }\n    if (val == \"edit\") {\n      setStatus(null);\n      setEmployee(\"Select Employee\");\n      setSelEmployeeData(\"\");\n      setShiftOption(\"Select Shift\");\n      setPreviewData([]);\n      setSelectedDate(Date.now());\n      setHours(1);\n      setIsModalEditOpen(false);\n    }\n    if (val == \"rm\") {\n      setRevert(false);\n      setStatus(null);\n      setEmployee(\"Select Employee\");\n      setSelEmployeeData(\"\");\n      setShiftOption(\"Select Shift\");\n      setPreviewData([]);\n      setSelectedDate(Date.now());\n      setIsModalRmOpen(false);\n    }\n    if (val == \"gen\") {\n      setEmp(\"Select Employee\");\n      setPdfBlob(null);\n      setSelectedDate1(Date.now());\n      setSelectedDate2(Date.now());\n      setIsModalGenOpen(false);\n    }\n    if (val == \"manage\") {\n      setManageEmployeeModal(false);\n      setEmployeeEmail(\"\");\n      setEmployeeLocation(\"\");\n      setEmployeeName(\"\");\n      setEmployeePhone(\"\");\n      setEmployeeTitle(\"\");\n      setEmployeeWage(\"\");\n      setAction(false);\n      setClickedEmployee(null);\n    }\n    if (val == \"schedule\") {\n      setScheduleEmployeeModal(false);\n    }\n  };\n  // component init\n  return (\n    <>\n      <CardGrid>\n        <Card onClick={() => handleModalOpen(\"viewScheduler\")}>\n          <h2 className=\"text-black mb-3\">Employee Scheduler</h2>\n          <SubComponent>\n            <h3 className=\"text-gray-800/50\">Utility</h3>\n            <p className=\"text-gray-800/50\">\n              Scheduler to handle employee shifts\n            </p>\n          </SubComponent>\n        </Card>\n        <Card onClick={() => handleModalOpen(\"edit\")}>\n          <h2 className=\"text-black mb-3\">Edit Employee Shift</h2>\n          <SubComponent>\n            <h3 className=\"text-gray-800/50\">Utility</h3>\n            <p className=\"text-gray-800/50\">\n              Edit start or end shift time for a given employee\n            </p>\n          </SubComponent>\n        </Card>\n        <Card onClick={() => handleModalOpen(\"rm\")}>\n          <h2 className=\"text-black mb-3\">Remove Employee Shift</h2>\n          <SubComponent>\n            <h3 className=\"text-gray-800/50\">Utility</h3>\n            <p className=\"text-gray-800/50\">\n              Remove employee shift day with a given id and date\n            </p>\n          </SubComponent>\n        </Card>\n        <Card onClick={() => handleModalOpen(\"gen\")}>\n          <h2 className=\"text-black mb-3\">Generate Employee Work Times</h2>\n          <SubComponent>\n            <h3 className=\"text-gray-800/50\">Utility</h3>\n            <p className=\"text-gray-800/50\">Generate pdf files for employess</p>\n          </SubComponent>\n        </Card>\n        {/* <Card onClick={() => handleModalOpen(\"add\")}>\n          <h2 className=\"text-black mb-3\">Add Employee Assignment</h2>\n          <SubComponent>\n            <h3 className=\"text-gray-800/50\">Utility</h3>\n            <p className=\"text-gray-800/50\">\n              Add employee assignment to keep track of orders\n            </p>\n          </SubComponent>\n        </Card> */}\n        {/* <Card onClick={() => handleModalOpen(\"editAssign\")}>\n          <h2 className=\"text-black mb-3\">Edit Employee Assignment</h2>\n          <SubComponent>\n            <h3 className=\"text-gray-800/50\">Utility</h3>\n            <p className=\"text-gray-800/50\">\n              Edit Employee assignment or update certain parameters\n            </p>\n          </SubComponent>\n        </Card>\n        <Card onClick={() => handleModalOpen(\"rmAssign\")}>\n          <h2 className=\"text-black mb-3\">Remove Employee Assignment</h2>\n          <SubComponent>\n            <h3 className=\"text-gray-800/50\">Utility</h3>\n            <p className=\"text-gray-800/50\">\n              Remove employee assignment entry given a date\n            </p>\n          </SubComponent>\n        </Card>\n        <Card onClick={() => handleModalOpen(\"viewAssign\")}>\n          <h2 className=\"text-black mb-3\">View Employee Assignments</h2>\n          <SubComponent>\n            <h3 className=\"text-gray-800/50\">Utility</h3>\n            <p className=\"text-gray-800/50\">\n              View given employee assignment within a range\n            </p>\n          </SubComponent>\n        </Card> */}\n        <Card onClick={() => handleModalOpen(\"manage\")}>\n          <h2 className=\"text-black mb-3\">Manage Employees</h2>\n          <SubComponent>\n            <h3 className=\"text-gray-800/50\">Utility</h3>\n            <p className=\"text-gray-800/50\">Add, Delete, or View Employees</p>\n          </SubComponent>\n        </Card>\n        <Card onClick={() => handleModalOpen(\"schedule\")}>\n          <h2 className=\"text-black mb-3\">Manage Employee Schedule</h2>\n          <SubComponent>\n            <h3 className=\"text-gray-800/50\">Utility</h3>\n            <p className=\"text-gray-800/50\">\n              Create weekly schedule for employee{\" \"}\n            </p>\n          </SubComponent>\n        </Card>\n      </CardGrid>\n      {/* <div className=\"hidden lg:block fixed bottom-0 left-0 w-full bg-red-500 py-2\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6\">\n            <AlertCard\n              title=\"Employee Alert\"\n              message=\"Jennifer missed today.\"\n            />\n            <AlertCard\n              title=\"Shift Alert\"\n              message=\"Oscar changed his end shift\"\n            />\n            <AlertCard\n              title=\"Generation Alert\"\n              message=\"Generated Time Report for Oscar\"\n            />\n          </div>\n        </div>\n      </div> */}\n      {/* edit modal */}\n      {isModalEditOpen && (\n        <>\n          <ModalBackground onClick={() => handleModalClose(\"edit\")} />\n          <ModalContainer>\n            <ModalHeader className=\"sticky top-0 z-10 bg-white\">\n              <ModalTitle className=\"text-black\">Edit Utility</ModalTitle>\n              <ModalCloseButton onClick={() => handleModalClose(\"edit\")}>\n                <FaTimes className=\"w-5 h-5 mr-2\" />\n              </ModalCloseButton>\n            </ModalHeader>\n            {status == null ? (\n              <>\n                <div className=\"p-4 grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-4 border border-b-2 border-black/20\">\n                  <div>\n                    <p className=\"text-black\">Select Shift Options</p>\n                    <DropdownButton\n                      setData={setShiftOption}\n                      dataValue={shiftOption}\n                      data={{ data: shiftDefault }}\n                    />\n                  </div>\n                  <div>\n                    <p className=\"text-black\">Select Employee</p>\n                    <DropdownButton\n                      setData={setEmployee}\n                      dataValue={employee}\n                      data={{ data: local_data.emps }}\n                    />\n                  </div>\n                  <div>\n                    <p className=\"text-black\">Select Date</p>\n                    <Datepicker\n                      selected={selectedDate}\n                      setSelected={setSelectedDate}\n                    />\n                  </div>\n                  <div>\n                    <p className=\"text-black\">Enter Change In Hours</p>\n                    <input\n                      className=\"text-black w-full rounded-lg border border-black/20 p-2\"\n                      type=\"number\"\n                      value={hours}\n                      onChange={(e) => {\n                        setHours(e.target.value);\n                      }}\n                      placeholder=\"Enter Hours\"\n                      min={0}\n                      max={20}\n                    />\n                  </div>\n                </div>\n                <div className=\"text-black flex justify-center items-center text-3xl mt-20\">\n                  <div className=\"w-auto h-auto text-center opacity-50\">\n                    {previewData.length > 0 ? (\n                      <div>\n                        {employee}\n                        {previewData.map((obj) => {\n                          if (obj.SHIFT_CHANGE == true) {\n                            return (\n                              <div\n                                key={obj.SHIFT_DATE}\n                                className=\"bg-red-500/80 rounded-lg\"\n                              >\n                                {shiftOption == \"end\"\n                                  ? obj.SHIFT_END\n                                  : obj.SHIFT_START}\n                              </div>\n                            );\n                          } else {\n                            return (\n                              <div key={obj.SHIFT_DATE}>\n                                {shiftOption == \"end\"\n                                  ? obj.SHIFT_END\n                                  : obj.SHIFT_START}\n                              </div>\n                            );\n                          }\n                        })}\n                      </div>\n                    ) : (\n                      <div> Loading Preview...</div>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex flex-col sm:flex-row justify-center items-center sm:mt-8 md:mt-12 lg:mt-16\">\n                  <button\n                    className=\"w-full sm:w-auto rounded-lg text-black border border-3 bg-zuma-green/80 px-4 py-2 sm:mr-4 mb-4 sm:mb-0\"\n                    onClick={() => {\n                      editPreviewData({\n                        e_id: selEmployeeData,\n                        date: selectedDate,\n                        shiftOption: shiftOption,\n                        hours: hours,\n                      });\n                    }}\n                  >\n                    Preview Change\n                  </button>\n                  <button\n                    className=\"w-full sm:w-auto rounded-lg text-black border border-3 bg-orange-500/80 px-4 py-2\"\n                    onClick={() => {\n                      submitEdit({\n                        e_id: selEmployeeData,\n                        date: selectedDate,\n                        shiftOption: shiftOption,\n                        hours: hours,\n                      });\n                    }}\n                  >\n                    Change Shift Entry\n                  </button>\n                </div>\n              </>\n            ) : (\n              <div className=\"text-gray-900 font-bold\"> Entry Changed!</div>\n            )}\n          </ModalContainer>\n        </>\n      )}\n      {/* rm modal */}\n      {/* //Range remove range state const [rangeOption, setRangeOption] =\n      useState(false); const [rangeSelectedStart, setRangeSelectedStart] =\n      useState(Date.now()) const [rangeSelectedEnd, setRangeSelectedEnd] =\n      useState(Date.now()); const [revertRange, setRevertRange] =\n      useState(false); */}\n      {isModalRmOpen && (\n        <>\n          <ModalBackground onClick={() => handleModalClose(\"rm\")} />\n          <ModalContainer className=\"sm:w-11/12 md:w-5/6 lg:w-2/3\">\n            <ModalHeader className=\"sticky top-0 z-10 bg-white\">\n              <ModalTitle className=\"text-black\">\n                Remove Shift Utility\n              </ModalTitle>\n              <ModalCloseButton onClick={() => handleModalClose(\"rm\")}>\n                <FaTimes className=\"w-5 h-5 mr-2\" />\n              </ModalCloseButton>\n            </ModalHeader>\n\n            <>\n              {rangeOption == false ? (\n                <>\n                  {status == null ? (\n                    <>\n                      <div className=\"p-4 grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 border border-b-2 border-black/20\">\n                        <div>\n                          <p className=\"text-black\">Select Employee</p>\n                          <DropdownButton\n                            setData={setEmployee}\n                            dataValue={employee}\n                            data={{ data: local_data.emps }}\n                          />\n                        </div>\n                        <div>\n                          <p className=\"text-black\">Select Date</p>\n                          <Datepicker\n                            selected={selectedDate}\n                            setSelected={setSelectedDate}\n                          />\n                        </div>\n                        <button\n                          onClick={() => setRangeOption(!rangeOption)}\n                          className=\"w-full sm:w-auto rounded-lg text-black border border-3 bg-zuma-green/80 px-4 py-2 sm:mr-4 mb-4 sm:mb-0\"\n                        >\n                          <p>Select Range</p>\n                        </button>\n                      </div>\n                      <div className=\"text-black flex justify-center items-center text-3xl mt-20\">\n                        <div className=\"w-auto h-auto text-center opacity-50\">\n                          {previewData.length > 0 ? (\n                            <div>\n                              {employee}\n                              {previewData.map((obj) => {\n                                if (\n                                  obj.SHIFT_CHANGE == true &&\n                                  obj.SHIFT_DATE == \"Called Off\"\n                                ) {\n                                  return (\n                                    <div\n                                      className=\"flex items-center\"\n                                      key={obj.SHIFT_DATE}\n                                    >\n                                      <div\n                                        key={obj.SHIFT_DATE}\n                                        className=\"bg-red-500/80 rounded-lg mr-2 py-1 px-2\"\n                                      >\n                                        {obj.SHIFT_DATE}\n                                      </div>\n                                      <Slider\n                                        value={revert}\n                                        onChange={setRevert}\n                                      />\n                                      <div className=\"text-lg\">\n                                        Revert Shift Removal\n                                      </div>\n                                    </div>\n                                  );\n                                } else if (obj.SHIFT_CHANGE == true) {\n                                  return (\n                                    <div\n                                      key={obj.SHIFT_DATE}\n                                      className=\"bg-red-500/80 rounded-lg\"\n                                    >\n                                      {obj.SHIFT_DATE}\n                                    </div>\n                                  );\n                                } else {\n                                  return (\n                                    <div key={obj.SHIFT_DATE}>\n                                      {obj.SHIFT_DATE}\n                                    </div>\n                                  );\n                                }\n                              })}\n                            </div>\n                          ) : (\n                            <div> Loading Preview...</div>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col sm:flex-row justify-center items-center sm:mt-8 lg:mt-16\">\n                        {!revert && (\n                          <button\n                            className=\"w-full sm:w-auto rounded-lg text-black border border-3 bg-zuma-green/80 px-4 py-2 sm:mr-4 mb-4 sm:mb-0\"\n                            onClick={() => {\n                              removePreviewData({\n                                e_id: selEmployeeData,\n                                date: selectedDate,\n                                shiftOption: shiftOption,\n                                hours: hours,\n                              });\n                            }}\n                          >\n                            Preview Change\n                          </button>\n                        )}\n                        <button\n                          className=\"w-full sm:w-auto rounded-lg text-black border border-3 bg-orange-500/80 px-4 py-2\"\n                          onClick={() => {\n                            submitRemove({\n                              e_id: selEmployeeData,\n                              date: selectedDate,\n                              shiftOption: shiftOption,\n                              hours: hours,\n                              revert: revert,\n                            });\n                          }}\n                        >\n                          {revert\n                            ? \"Revert Modified Entry\"\n                            : \"Remove Shift Entry\"}\n                        </button>\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"text-gray-900 font-bold\">\n                      {\" \"}\n                      {revert\n                        ? \"Reverted Removal Of Entry\"\n                        : \"Removed Shift Entry!\"}\n                    </div>\n                  )}\n                </>\n              ) : (\n                <>\n                  {\" \"}\n                  <div className=\"p-4 grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 border border-b-2 border-black/20\">\n                    <div>\n                      <p className=\"text-black\">Select Employee</p>\n                      <DropdownButton\n                        setData={setEmployee}\n                        dataValue={employee}\n                        data={{ data: local_data.emps }}\n                      />\n                    </div>\n                    <div>\n                      <p className=\"text-black\">Select Start Date</p>\n                      <Datepicker\n                        selected={rangeSelectedStart}\n                        setSelected={setRangeSelectedStart}\n                      />\n                    </div>\n                    <div>\n                      <p className=\"text-black\">Select End Date</p>\n                      <Datepicker\n                        selected={rangeSelectedEnd}\n                        setSelected={setRangeSelectedEnd}\n                      />\n                    </div>\n                    <button\n                      onClick={() => setRangeOption(!rangeOption)}\n                      className=\"w-full sm:w-auto rounded-lg text-black border border-3 bg-zuma-green/80 px-4 py-2 sm:mr-4 mb-4 sm:mb-0\"\n                    >\n                      <p>Select Single Date</p>\n                    </button>\n                    <div className=\"flex items-center gap-4 mt-4\">\n                      <label className=\"flex items-center\">\n                        <span className=\"text-black mr-2\">Revert</span>\n                        <input\n                          type=\"checkbox\"\n                          checked={revertRange}\n                          onChange={(e) => setRevertRange(e.target.checked)}\n                          className=\"appearance-none w-12 h-6 rounded-full bg-gray-300 checked:bg-zuma-green/80 relative transition-all duration-200\"\n                          style={{\n                            backgroundImage: revertRange\n                              ? \"linear-gradient(to right, #22c55e, #16a34a)\"\n                              : undefined,\n                          }}\n                        />\n                      </label>\n                    </div>\n                  </div>\n                  <>\n                    <button\n                      onClick={() => {\n                        https.setRemoveRange({\n                          revert: revertRange,\n                          startDate: rangeSelectedStart,\n                          endDate: rangeSelectedEnd,\n                          e_id: selEmployeeData,\n                        });\n                        window.alert(\n                          revertRange\n                            ? \"Successfully reverted range of shift entries.\"\n                            : \"Successfully removed range of shift entries.\"\n                        );\n                      }}\n                      className=\"flex justify-center items-center mt-8 rounded-lg text-black border border-3 bg-orange-200 px-4 py-2 sm:mr-4 mb-4 sm:mb-0\"\n                    >\n                      {\" \"}\n                      Submit Range Of Dates\n                    </button>\n                  </>\n                </>\n              )}\n            </>\n          </ModalContainer>\n        </>\n      )}\n      {/* gen modal */}\n      {isModalGenOpen && (\n        <>\n          <ModalBackground onClick={() => handleModalClose(\"gen\")} />\n          <ModalContainer>\n            <ModalHeader className=\"sticky top-0 z-10 bg-white\">\n              <ModalTitle className=\"text-black\">Generate Utility</ModalTitle>\n              <ModalCloseButton onClick={() => handleModalClose(\"gen\")}>\n                <FaTimes className=\"w-5 h-5 mr-2\" />\n              </ModalCloseButton>\n            </ModalHeader>\n            <div className=\"p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 border border-b-2 border-black/20\">\n              <div className=\"mb-4 md:mb-0\">\n                <p className=\"text-black\">Select Employee</p>\n                <DropdownButton\n                  setData={setEmp}\n                  dataValue={emp}\n                  data={{ data: local_data.gen_emps }}\n                />\n              </div>\n              <div className=\"mb-4 md:mb-0\">\n                <p className=\"text-black\">Select Start Date</p>\n                <Datepicker\n                  selected={selectedDate1}\n                  setSelected={setSelectedDate1}\n                />\n              </div>\n              <div>\n                <p className=\"text-black\">Select End Date</p>\n                <Datepicker\n                  selected={selectedDate2}\n                  setSelected={setSelectedDate2}\n                />\n              </div>\n            </div>\n\n            <PdfViewer fileBlob={pdfBlob} />\n            <div className=\"flex justify-center items-center mt-8 md:mt-20 mb-8 md:mb-20\">\n              <button\n                className=\"bg-zuma-green text-white py-2 px-4 rounded-lg shadow-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-zuma-green-dark focus:ring-opacity-50\"\n                onClick={() => {\n                  gen_pdf({\n                    e_id: empData,\n                    date1: selectedDate1,\n                    date2: selectedDate2,\n                  });\n                }}\n              >\n                Generate PDF\n              </button>\n            </div>\n          </ModalContainer>\n        </>\n      )}\n      {/* add assignment modal */}\n      {isModalAddOpen && (\n        <>\n          <ModalBackground onClick={() => handleModalClose(\"add\")} />\n          <ModalContainer>\n            <ModalHeader className=\"sticky top-0 z-10 bg-white\">\n              <ModalTitle className=\"text-black\">Assignment Utility</ModalTitle>\n              <ModalCloseButton onClick={() => handleModalClose(\"add\")}>\n                <FaTimes className=\"w-5 h-5 mr-2\" />\n              </ModalCloseButton>\n            </ModalHeader>\n            {response == null ? (\n              <>\n                <div className=\"p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 border border-b-2 border-black/20\">\n                  <div className=\"mb-4 md:mb-0\">\n                    <p className=\"text-black\">Select Employee</p>\n                    <DropdownButton\n                      setData={setEmp}\n                      dataValue={emp}\n                      data={{ data: local_data.emps }}\n                    />\n                  </div>\n                  <div className=\"mb-4 md:mb-0\">\n                    <p className=\"text-black\">Select Date</p>\n                    <Datepicker\n                      selected={selectedDate3}\n                      setSelected={setSelectedDate3}\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-black\">Enter Start Range</label>\n                    <input\n                      type={\"number\"}\n                      className=\"text-black rounded-lg border border-black/20 p-2\"\n                      value={rangeStart}\n                      onChange={(e) => {\n                        setRangeStart(e.target.value);\n                      }}\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-black\">Enter End Range</label>\n                    <input\n                      type={\"number\"}\n                      className=\"text-black rounded-lg border border-black/20 p-2\"\n                      value={rangeEnd}\n                      onChange={(e) => {\n                        setRangeEnd(e.target.value);\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className=\"text-black flex justify-center items-center text-3xl mt-20 mb-5\">\n                  <div className=\"w-auto h-auto text-center opacity-50\">\n                    <div className=\"text-black\">\n                      <div className=\"bg-zuma-green py-2 px-2 rounded-lg\">\n                        Employee: {previewDataAdd.employee},\n                      </div>\n                      <div className=\"bg-zuma-green/70 py-2 px-2 rounded-lg\">\n                        Range: {previewDataAdd.range[0]} to{\" \"}\n                        {previewDataAdd.range[1]}\n                      </div>\n                      <div className=\"bg-zuma-green/50 py-2 px-2 rounded-lg\">\n                        Total Orders: {previewDataAdd.total}\n                      </div>\n                      <div className=\"bg-zuma-green/50 py-2 px-2 rounded-lg\">\n                        Entry Date:{\" \"}\n                        {new Date(previewDataAdd.date).toLocaleDateString()}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex flex-col sm:flex-row justify-center items-center sm:mt-8 lg:mt-16\">\n                  <button\n                    className=\"w-full sm:w-auto rounded-lg text-black border border-3 bg-orange-500/80 px-4 py-2 mb-4\"\n                    onClick={() => {\n                      submitAdd({\n                        e_id: empData,\n                        date: selectedDate3,\n                        rangeStart,\n                        rangeEnd,\n                      });\n                    }}\n                  >\n                    Add Assignment\n                  </button>\n                </div>\n              </>\n            ) : (\n              <div> Assignment added for the employee!</div>\n            )}\n          </ModalContainer>\n        </>\n      )}\n      {/* edit add assignment modal */}\n      {isModalEditAssignOpen && (\n        <>\n          <ModalBackground onClick={() => handleModalClose(\"editAssign\")} />\n          <ModalContainer>\n            <ModalHeader className=\"sticky top-0 z-10 bg-white\">\n              <ModalTitle className=\"text-black\">\n                Edit Assignment Utility\n              </ModalTitle>\n              <ModalCloseButton onClick={() => handleModalClose(\"editAssign\")}>\n                <FaTimes className=\"w-5 h-5 mr-2\" />\n              </ModalCloseButton>\n            </ModalHeader>\n            <div className=\"p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 border border-b-2 border-black/20\">\n              <div className=\"mb-4 md:mb-0\">\n                <p className=\"text-black\">Select Employee</p>\n                <DropdownButton\n                  setData={setEmp}\n                  dataValue={emp}\n                  data={{ data: local_data.emps }}\n                />\n              </div>\n              <div className=\"mb-4 md:mb-0\">\n                <p className=\"text-black\">Select Range Option</p>\n                <DropdownButton\n                  setData={setC_Range}\n                  dataValue={C_Range}\n                  data={{ data: local_data.emp_option }}\n                />\n              </div>\n              <div className=\"mb-4 md:mb-0\">\n                <p className=\"text-black\">Select Date</p>\n                <Datepicker\n                  selected={selectedDate3}\n                  setSelected={setSelectedDate3}\n                />\n              </div>\n              <div>\n                <label className=\"text-black\">Enter New Range</label>\n                <input\n                  type={\"number\"}\n                  className=\"text-black rounded-lg border border-black/20 p-2\"\n                  value={rangeStart}\n                  onChange={(e) => {\n                    setRangeStart(e.target.value);\n                  }}\n                />\n              </div>\n            </div>\n            {/* preview data */}\n\n            <div className=\"flex flex-col sm:flex-row justify-center items-center sm:mt-8 lg:mt-16\">\n              {!transitionEdit ? (\n                <button\n                  className=\"w-full sm:w-auto rounded-lg text-black border border-3 bg-orange-500/80 px-4 py-2\"\n                  onClick={() => {\n                    submitRemove({\n                      e_id: selEmployeeData,\n                      date: selectedDate,\n                      shiftOption: shiftOption,\n                      hours: hours,\n                    });\n                  }}\n                >\n                  Get Employee Assign Entries\n                </button>\n              ) : (\n                <button\n                  className=\"w-full sm:w-auto rounded-lg text-black border border-3 bg-orange-500/80 px-4 py-2\"\n                  onClick={() => {\n                    submitRemove({\n                      e_id: selEmployeeData,\n                      date: selectedDate,\n                      shiftOption: shiftOption,\n                      hours: hours,\n                    });\n                  }}\n                >\n                  Change Assignment Range\n                </button>\n              )}\n            </div>\n          </ModalContainer>\n        </>\n      )}\n      {/* remove assignment modal */}\n      {isModalRmAssignOpen && (\n        <>\n          <ModalBackground onClick={() => handleModalClose(\"rmAssign\")} />\n          <ModalContainer>\n            <ModalHeader className=\"sticky top-0 z-10 bg-white\">\n              <ModalTitle className=\"text-black\">\n                Remove Assignment Utility\n              </ModalTitle>\n              <ModalCloseButton onClick={() => handleModalClose(\"rmAssign\")}>\n                <FaTimes className=\"w-5 h-5 mr-2\" />\n              </ModalCloseButton>\n            </ModalHeader>\n            <div className=\"p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 border border-b-2 border-black/20\">\n              <div className=\"mb-4 md:mb-0\">\n                <p className=\"text-black\">Select Employee</p>\n                <DropdownButton\n                  setData={setEmp}\n                  dataValue={emp}\n                  data={{ data: local_data.emps }}\n                />\n              </div>\n              <div className=\"mb-4 md:mb-0\">\n                <p className=\"text-black\">Select Range Option</p>\n                <DropdownButton\n                  setData={setEmp}\n                  dataValue={emp}\n                  data={{ data: local_data.emps }}\n                />\n              </div>\n              <div className=\"mb-4 md:mb-0\">\n                <p className=\"text-black\">Select Date</p>\n                <Datepicker\n                  selected={selectedDate3}\n                  setSelected={setSelectedDate3}\n                />\n              </div>\n              <div>\n                <label className=\"text-black\">Enter New Range</label>\n                <input\n                  type={\"number\"}\n                  className=\"text-black  rounded-lg border border-black/20 p-2\"\n                  value={rangeStart}\n                  onChange={(e) => {\n                    setRangeStart(e.target.value);\n                  }}\n                />\n              </div>\n            </div>\n            {/* preview data useEffect*/}\n\n            <div className=\"flex flex-col sm:flex-row justify-center items-center sm:mt-8 lg:mt-16\">\n              <button\n                className=\"w-full sm:w-auto rounded-lg text-black border border-3 bg-orange-500/80 px-4 py-2\"\n                onClick={() => {\n                  submitRemove({\n                    e_id: selEmployeeData,\n                    date: selectedDate,\n                    shiftOption: shiftOption,\n                    hours: hours,\n                  });\n                }}\n              >\n                Change Shift Entry\n              </button>\n            </div>\n          </ModalContainer>\n        </>\n      )}\n      {/* view assignment modal */}\n      {isModalViewAssignOpen && (\n        <>\n          <ModalBackground onClick={() => handleModalClose(\"viewAssign\")} />\n          <ModalContainer>\n            <ModalHeader className=\"sticky top-0 z-10 bg-white\">\n              <ModalTitle className=\"text-black\">\n                View Assignment Utility\n              </ModalTitle>\n              <ModalCloseButton onClick={() => handleModalClose(\"viewAssign\")}>\n                <FaTimes className=\"w-5 h-5 mr-2\" />\n              </ModalCloseButton>\n            </ModalHeader>\n            <div className=\"p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 border border-b-2 border-black/20\">\n              <div className=\"mb-4 md:mb-0\">\n                <p className=\"text-black\">Select Employee</p>\n                <DropdownButton\n                  setData={setEmp}\n                  dataValue={emp}\n                  data={{ data: local_data.emps }}\n                />\n              </div>\n              <div className=\"mb-4 md:mb-0\">\n                <p className=\"text-black\">Select Range Option</p>\n                <DropdownButton\n                  setData={setEmp}\n                  dataValue={emp}\n                  data={{ data: local_data.emps }}\n                />\n              </div>\n              <div className=\"mb-4 md:mb-0\">\n                <p className=\"text-black\">Select Date</p>\n                <Datepicker\n                  selected={selectedDate3}\n                  setSelected={setSelectedDate3}\n                />\n              </div>\n              <div>\n                <label className=\"text-black\">Enter New Range</label>\n                <input\n                  type={\"number\"}\n                  className=\"text-black rounded-lg border border-black/20 p-2\"\n                  value={rangeStart}\n                  onChange={(e) => {\n                    setRangeStart(e.target.value);\n                  }}\n                />\n              </div>\n            </div>\n            {/* preview data useEffect*/}\n\n            <div className=\"flex flex-col sm:flex-row justify-center items-center sm:mt-8 lg:mt-16\">\n              <button\n                className=\"w-full sm:w-auto rounded-lg text-black border border-3 bg-orange-500/80 px-4 py-2\"\n                onClick={() => {\n                  submitRemove({\n                    e_id: selEmployeeData,\n                    date: selectedDate,\n                    shiftOption: shiftOption,\n                    hours: hours,\n                  });\n                }}\n              >\n                Change Shift Entry\n              </button>\n            </div>\n          </ModalContainer>\n        </>\n      )}\n      {/* {\"manageEmployee\"} */}\n      {manageEmployeeModal && (\n        <>\n          <ModalBackground onClick={() => handleModalClose(\"manage\")} />\n          <ModalContainer>\n            <ModalHeader className=\"sticky top-0 z-10 bg-white\">\n              <ModalTitle className=\"text-black\">Manage Employees</ModalTitle>\n              <ModalCloseButton onClick={() => handleModalClose(\"manage\")}>\n                <FaTimes className=\"w-5 h-5 mr-2\" />\n              </ModalCloseButton>\n            </ModalHeader>\n            <div className=\"max-h-[75vh] overflow-y-auto rounded border text-black\">\n              <table className=\"min-w-full table-fixed text-sm\">\n                <thead className=\"bg-gray-200 sticky top-0 z-10\">\n                  <tr>\n                    <th className=\"px-4 py-2 border w-1/4 text-left\">Name</th>\n                    <th className=\"px-4 py-2 border w-1/4 text-left\">ID</th>\n                    <th className=\"px-4 py-2 border w-1/4 text-left\">Title</th>\n                    <th className=\"px-2 py-2 border w-12 text-center\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {/* ✅ Employee Rows */}\n                  {tableRows}\n\n                  {/* ✅ Delete Confirmation Row */}\n                  {clickedEmployee !== null && (\n                    <tr className=\"bg-red-50 text-black\">\n                      <td colSpan={4} className=\"px-4 py-3\">\n                        <div className=\"flex justify-between items-center\">\n                          <span>\n                            Are you sure you want to delete this employee?\n                          </span>\n                          <div className=\"space-x-2\">\n                            <button\n                              onClick={() => {\n                                handleEmployeeDelete();\n                                setClickedEmployee(null);\n                                init();\n                              }}\n                              className=\"px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-sm\"\n                            >\n                              Confirm\n                            </button>\n                            <button\n                              onClick={() => setClickedEmployee(null)}\n                              className=\"px-3 py-1 bg-gray-300 text-black rounded hover:bg-gray-400 text-sm\"\n                            >\n                              Cancel\n                            </button>\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  )}\n\n                  {/* ✅ Add Inline Form */}\n                  {!showAddForm ? (\n                    <tr>\n                      <td colSpan={4} className=\"text-center py-3\">\n                        <button\n                          onClick={() => setShowAddForm(true)}\n                          className=\"text-blue-600 hover:underline font-medium\"\n                        >\n                          + Add Employee\n                        </button>\n                      </td>\n                    </tr>\n                  ) : (\n                    <tr className=\"bg-gray-50\">\n                      <td colSpan={4}>\n                        <div className=\"p-4 space-y-4\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            {[\n                              [\"Full Name\", employeeName, setEmployeeName],\n                              [\"Email\", employeeEmail, setEmployeeEmail],\n                              [\"Phone\", employeePhone, setEmployeePhone],\n                              [\"Title\", employeeTitle, setEmployeeTitle],\n                              [\"Wage\", employeeWage, setEmployeeWage],\n                              [\n                                \"Location ID\",\n                                employeeLocation,\n                                setEmployeeLocation,\n                              ],\n                            ].map(([label, val, setFn], idx) => (\n                              <div key={idx}>\n                                <label className=\"block text-sm font-medium text-black mb-1\">\n                                  {label}\n                                </label>\n                                <input\n                                  type=\"text\"\n                                  value={val}\n                                  onChange={(e) => setFn(e.target.value)}\n                                  className=\"w-full px-3 py-2 border rounded-md text-black border-gray-300\"\n                                  placeholder={label}\n                                />\n                              </div>\n                            ))}\n                          </div>\n\n                          <div className=\"flex justify-end gap-3\">\n                            <button\n                              onClick={() => {\n                                handleEmployeeAdd();\n                                setShowAddForm(false);\n                                init()\n                              }}\n                              className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm\"\n                            >\n                              Submit\n                            </button>\n                            <button\n                              onClick={() => setShowAddForm(false)}\n                              className=\"bg-gray-300 hover:bg-gray-400 text-black px-4 py-2 rounded text-sm\"\n                            >\n                              Cancel\n                            </button>\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </ModalContainer>\n        </>\n      )}\n      {scheduleEmployeeModal && (\n        <>\n          <ModalBackground onClick={() => handleModalClose(\"schedule\")} />\n          <ModalContainer>\n            <ModalHeader className=\"sticky top-0 z-10 bg-white\">\n              <ModalTitle className=\"text-black\">\n                Manage Employee Schedule\n              </ModalTitle>\n              <ModalCloseButton onClick={() => handleModalClose(\"schedule\")}>\n                <FaTimes className=\"w-5 h-5 mr-2\" />\n              </ModalCloseButton>\n            </ModalHeader>\n            <div className=\"flex flex-1 justify-center items-center w-full\">\n              <div className=\"p-6 bg-white rounded-lg shadow max-w-4xl w-full text-black\">\n                {/* Employee Selector */}\n                <div className=\"mb-6\">\n                  <label\n                    htmlFor=\"employee-select\"\n                    className=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Select Employee\n                  </label>\n                  <select\n                    id=\"employee-select\"\n                    className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md text-black\"\n                    value={selectedEmployee}\n                    onChange={(e) => setSelectedEmployee(e.target.value)}\n                  >\n                    {scheduleEmployees.map((employee) => (\n                      <option key={employee.id} value={employee.name}>\n                        {employee.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Vertical Day List */}\n                <div className=\"space-y-4\">\n                  {daysOfWeek.map((day) => (\n                    <div\n                      key={day}\n                      className=\"flex flex-col sm:flex-row sm:items-center gap-3 border-b pb-4\"\n                    >\n                      <span className=\"w-32 text-sm font-semibold text-gray-700 capitalize\">\n                        {day}\n                      </span>\n                      <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 w-full\">\n                        <input\n                          type=\"time\"\n                          step=\"3600\"\n                          value={formatHour(schedule[day]?.start)}\n                          onChange={handleScheduleChange(day, \"start\")}\n                          className=\"h-10 px-3 w-full sm:w-1/2 border border-gray-300 rounded text-black\"\n                        />\n                        <input\n                          type=\"time\"\n                          step=\"3600\"\n                          value={formatHour(schedule[day]?.end)}\n                          onChange={handleScheduleChange(day, \"end\")}\n                          className=\"h-10 px-3 w-full sm:w-1/2 border border-gray-300 rounded text-black\"\n                        />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Submit Button */}\n                <button\n                  onClick={() => {\n                    handleSubmit();\n                    \n                  }}\n                  className=\"mt-6 w-full h-12 bg-emerald-700 hover:bg-emerald-600 text-white rounded-md\"\n                >\n                  Submit Schedule\n                </button>\n              </div>\n            </div>\n          </ModalContainer>\n        </>\n      )}\n      {viewScheduler && (\n        <>\n          <ModalBackground onClick={() => handleModalClose(\"viewScheduler\")} />\n          <ModalContainer>\n            <ModalHeader className=\"sticky top-0 z-10 bg-white\">\n              <ModalTitle className=\"text-black\">Scheduler Utility</ModalTitle>\n              <ModalCloseButton\n                onClick={() => handleModalClose(\"viewScheduler\")}\n              >\n                <FaTimes className=\"w-5 h-5 mr-2\" />\n              </ModalCloseButton>\n            </ModalHeader>\n            <select\n              id=\"employee-select\"\n              className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md text-black bg-gray-200\"\n              value={selectedEmployee}\n              onChange={(e) => setSelectedEmployee(e.target.value)}\n              style={{ marginBottom: \"0.25rem\" }}\n            >\n              {scheduleEmployees.map((employee) => (\n                <option key={employee.id} value={employee.name}>\n                  {employee.name}\n                </option>\n              ))}\n            </select>\n            <MyCalendar\n              employee={scheduleEmployees.find(\n                (emp) => emp.name === selectedEmployee\n              )}\n            />\n          </ModalContainer>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Employee;\n","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/HTTP/HTTPS.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/HTTP/HTTPS_INTERFACE.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ActivationLog.js",["201","202"],[],"import React, { useEffect, useState, useRef } from \"react\";\nimport BaseModal from \"./Base\";\nimport http_handler from \"../HTTP/HTTPS_INTERFACE\";\nconst http = new http_handler();\n\nexport default function ActivationLog(props) {\n  const [filteredActivation, setFilteredActivation] = useState([]);\n  const [filterDate, setFilterDate] = useState(\n    new Date().toISOString().split(\"T\")[0]\n  );\n\n  const fetchActivation = async () => {\n    const response = await http.getActivationByDate({ date: filterDate }); // Assuming getShipments is a method in your http_handler\n    setFilteredActivation(response.data);\n  };\n\n  useEffect(() => {\n    fetchActivation();\n  }, []);\n\n  useEffect(() => {\n    if (filterDate) {\n      fetchActivation();\n    }\n  }, [filterDate]);\n\n  const handleDateFilterChange = (e) => {\n    setFilterDate(e.target.value);\n  };\n\n  const activationRows = filteredActivation.map((activation, index) => (\n    <tr\n      key={activation.ACTIVATION_ID}\n      className={index % 2 === 0 ? \"bg-white border\" : \"bg-gray-200 border\"}\n    >\n      <td className=\"px-4 py-2 text-black bg-rose-300\">\n        {activation.PRODUCT_ID}\n      </td>\n      <td className=\"px-4 py-2 text-black\">\n        {activation.PRODUCT_NAME ? activation.PRODUCT_NAME : \"N/A\"}\n      </td>\n      <td className=\"px-4 py-2 text-black\">{activation.QUANTITY}</td>\n      <td className=\"px-4 py-2 text-black\">\n        {new Date(activation.DATE).toDateString()}\n      </td>\n      <td className=\"px-4 py-2 text-black\">{\"N/A\"}</td>\n      <td className=\"px-4 py-2 text-black\">\n        {activation.EMPLOYEE_NAME ? activation.EMPLOYEE_NAME : \"N/A\"}\n      </td>\n    </tr>\n  ));\n\n  return (\n    <>\n      <BaseModal\n        visible={props.visible}\n        closeHandler={props.closeHandler}\n        title={\"View Product Activations\"}\n        closeName={\"activation\"}\n      >\n        <div className=\"container mx-auto p-4\">\n          <input\n            type=\"date\"\n            value={filterDate}\n            onChange={handleDateFilterChange}\n            className=\"mb-4 p-2 border rounded-lg text-black\"\n          />\n          <div className=\"overflow-y-auto max-h-130 mx-auto\">\n            <table className=\"min-w-full border-collapse text-center\">\n              {filteredActivation.length > 0 ? (\n                <>\n                  <thead className=\"bg-gray-400\">\n                    <tr>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Product ID\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Product Name\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">Quantity</th>\n                      <th className=\"px-4 py-2 border text-black\">Date</th>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Company ID\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">Employee</th>\n                    </tr>\n                  </thead>\n                  <tbody>{activationRows}</tbody>{\" \"}\n                </>\n              ) : (\n                <h1 className=\"text-black text-3xl\">\n                  No Product Activations for this date\n                </h1>\n              )}\n            </table>\n          </div>\n        </div>\n      </BaseModal>\n    </>\n  );\n}\n","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/Base.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/Chart.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/HardwareManager.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ManageProducts.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ManageSystem.js",["203"],[],"import React, { useEffect, useState, useRef } from \"react\";\nimport BaseModal from \"./Base\";\nimport http_handler from \"../HTTP/HTTPS_INTERFACE\";\nconst http = new http_handler();\n\nexport default function ManageSystem(props) {\n  const [action, setAction] = useState(true);\n\n  const [companyName, setCompanyName] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [type, setType] = useState(\"\");\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const [companies, setCompanies] = useState([]);\n  const [filteredCompanies, setFilteredCompanies] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState(null);\n\n  const reset = () => {\n    setCompanyName(\"\");\n    setAddress(\"\");\n    setPhone(\"\");\n    setType(\"\");\n  };\n\n  const init = async () => {\n    const companies = await http.getPartnerCompanies();\n    const formated_companies = companies.data.map((company) => {\n      return { ...company, focus: false };\n    });\n\n    setCompanies(formated_companies);\n    setFilteredCompanies(formated_companies);\n  };\n\n  useEffect(() => {\n    if (searchQuery === \"\") return setFilteredCompanies(companies);\n    else {\n      const newData = companies.filter((item) =>\n        item.NAME.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n      setFilteredCompanies(newData);\n    }\n  }, [searchQuery]);\n  useEffect(() => {\n    init();\n  }, []);\n  useEffect(() => {\n    reset();\n    init();\n  }, [action]);\n\n  const onFocusCompanies = (companies) => {\n    const focusEvent = filteredCompanies.map((item) => {\n      if (item.COMPANY_ID === companies.COMPANY_ID) {\n        return { ...item, focus: !item.focus };\n      } else {\n        return { ...item, focus: false };\n      }\n    });\n    setSelectedCompany(companies.focus ? null : companies);\n    setFilteredCompanies(focusEvent);\n  };\n\n  const tableRows = filteredCompanies.map((company, index) => (\n    <tr\n      key={company.COMPANY_ID}\n      className={`${\n        company.focus\n          ? \"bg-orange-300\"\n          : index % 2 === 0\n          ? \"bg-gray-100\"\n          : \"bg-white\"\n      }`}\n      onClick={() => onFocusCompanies(company)}\n    >\n      <td className=\"px-4 py-2 border text-black\">{company.NAME}</td>\n      <td className=\"px-4 py-2 border text-black bg-rose-400\">\n        {company.COMPANY_ID}\n      </td>\n    </tr>\n  ));\n\n  const handleAddCompany = () => {\n    if (!companyName) {\n      alert(\"Please fill in all fields.\");\n      return; // Stop the function if any field is empty\n    }\n    const data = {\n      name: companyName,\n      address: address,\n      phone: phone,\n      type: type,\n    };\n\n    http.addCompany(data);\n    alert(\"Company Added\");\n    setTimeout(() => {\n      init();\n    }, 500);\n  };\n\n  const handleDeleteCompany = () => {\n    if (selectedCompany == null) {\n      alert(\"Please select a product to delete\");\n      return;\n    }\n    const data = {\n      companyId: selectedCompany.COMPANY_ID,\n    };\n    http.deleteCompany(data);\n    alert(\"Product Deleted\");\n    setTimeout(() => {\n      init();\n    }, 500);\n  };\n\n  return (\n    <BaseModal\n      visible={props.visible}\n      closeHandler={props.closeHandler}\n      title={\"Manage Partner Companies\"}\n      closeName={\"system\"}\n    >\n      <div className=\"h-full w-full\">\n        <button\n          onClick={() => setAction(!action)}\n          className=\"w-32 h-24 bg-orange-300\"\n        >\n          <p className=\"text-xs\">Click to toggle</p>\n          <p className=\"font-bold\">\n            {action ? \"Add Company\" : \"Delete Company\"}\n          </p>\n        </button>\n\n        <div className=\"flex flex-1 justify-center items-center\">\n          <div className=\"p-6 bg-white rounded-lg shadow max-w-2xl w-full\">\n            {action ? (\n              <div className=\"flex flex-col space-y-3\">\n                <label className=\"font-semibold text-gray-700\">\n                  Company Name\n                </label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Company Name\"\n                  value={companyName}\n                  onChange={(e) => setCompanyName(e.target.value)}\n                  className=\"h-10 px-3 rounded border border-gray-300 text-black\"\n                />\n\n                <label className=\"font-semibold text-gray-700\">\n                  Company Address\n                </label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Company Address\"\n                  value={address}\n                  onChange={(e) => setAddress(e.target.value)}\n                  className=\"h-10 px-3 rounded border border-gray-300  text-black\"\n                />\n\n                <label className=\"font-semibold text-gray-700\">\n                  Company Description\n                </label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Company Description\"\n                  value={type}\n                  onChange={(e) => setType(e.target.value)}\n                  className=\"h-10 px-3 rounded border border-gray-300  text-black\"\n                />\n\n                <label className=\"font-semibold text-gray-700\">Phone</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Company Phone\"\n                  value={phone}\n                  onChange={(e) => setPhone(e.target.value)}\n                  className=\"h-10 px-3 rounded border border-gray-300  text-black\"\n                />\n\n                <button\n                  onClick={() => handleAddCompany()}\n                  className=\"w-full h-12 bg-blue-500 hover:bg-blue-600 text-white rounded-md\"\n                >\n                  Add Product\n                </button>\n              </div>\n            ) : (\n              <>\n                <div className=\"max-h-96 overflow-y-auto\">\n                  <input\n                    value={searchQuery}\n                    onChange={(e) => {\n                      setSearchQuery(e.target.value);\n                    }}\n                    className=\"w-full mb-4 p-2 border rounded-lg text-black\"\n                    placeholder=\"Search...\"\n                  />\n                  <table className=\"min-w-full border-collapse \">\n                    <thead>\n                      <tr className=\"bg-gray-300\">\n                        <th className=\"px-4 py-2 border text-black\">\n                          Company Name\n                        </th>\n                        <th className=\"px-4 py-2 border text-black\">\n                          Company ID\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>{tableRows}</tbody>\n                  </table>\n                </div>\n                {selectedCompany !== null && (\n                  <button\n                    className=\"mt-4 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out\"\n                    onClick={() => handleDeleteCompany()}\n                  >\n                    Delete Company\n                  </button>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </BaseModal>\n  );\n}\n","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/OverrideStock.js",["204"],[],"import React, { useEffect, useState } from \"react\";\nimport BaseModal from \"./Base\";\nimport http_handler from \"../HTTP/HTTPS_INTERFACE\";\nconst http = new http_handler();\n\nexport default function OverrideStock(props) {\n  const [products, setProducts] = useState([]);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [editingProductId, setEditingProductId] = useState(null);\n  const [editingField, setEditingField] = useState(null);\n  const [quantity, setQuantity] = useState(\"\");\n  const [inventoryMap, setInventoryMap] = useState(new Map());\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [changeMessage, setChangeMessage] = useState(\"\");\n\n  const [explanation, setExplanation] = useState(\"\");\n  const [errorRangeDates, setErrorRangeDates] = useState({\n    start: null,\n    end: null,\n  });\n  const [category, setCategory] = useState(\"\");\n  const [errorCauseType, setErrorCauseType] = useState(\"employee\");\n  const [showExtraParamsModal, setShowExtraParamsModal] = useState(false);\n  const [extraParamsError, setExtraParamsError] = useState(\"\");\n\n  const init = async () => {\n    const productInventory = await http.getProductsInventory();\n    const inventoryMap = new Map(\n      productInventory.data.map((item) => [item.PRODUCT_ID, item])\n    );\n    setInventoryMap(inventoryMap);\n\n    const products = await http.getProducts();\n    const formatted_products = products.data.map((product) => {\n      return { ...product, focus: false };\n    });\n\n    setProducts(formatted_products);\n    setFilteredProducts(formatted_products);\n  };\n\n  const handleUpdateStock = () => {\n    if (!quantity || !editingField || !editingProductId) {\n      setChangeMessage(\"Fields cannot be empty\");\n      return;\n    }\n\n    setShowExtraParamsModal(true);\n  };\n\n  const handleSubmitExtraParams = async () => {\n    if (\n      !explanation ||\n      !errorRangeDates.start ||\n      !errorRangeDates.end ||\n      !category ||\n      !errorCauseType\n    ) {\n      setExtraParamsError(\"All fields are required\");\n      return;\n    }\n\n    const productId = editingProductId;\n    const field = editingField;\n\n    const currentStock =\n      field === \"STORED_STOCK\"\n        ? inventoryMap.get(productId)?.STORED_STOCK\n        : inventoryMap.get(productId)?.ACTIVE_STOCK;\n\n    const difference = parseFloat(quantity) - currentStock;\n\n    const data = {\n      PRODUCT_ID: productId,\n      QUANTITY: difference,\n      explanation: explanation,\n      errorRangeDates: errorRangeDates,\n      category: category,\n      errorCauseType: errorCauseType,\n      beforeUpdateStock: currentStock,\n    };\n    await http.updateStock(data, field === \"STORED_STOCK\");\n\n    setInventoryMap((prevMap) => {\n      const updatedMap = new Map(prevMap);\n      const updatedProduct = { ...updatedMap.get(productId) };\n      if (field === \"STORED_STOCK\") {\n        updatedProduct.STORED_STOCK = parseFloat(quantity);\n      } else {\n        updatedProduct.ACTIVE_STOCK = parseFloat(quantity);\n      }\n      updatedMap.set(productId, updatedProduct);\n      return updatedMap;\n    });\n\n    setChangeMessage(\n      `Stock changed for ${\n        products.find((p) => p.PRODUCT_ID === productId).NAME\n      } to ${quantity}`\n    );\n    setEditingProductId(null);\n    setEditingField(null);\n    setQuantity(\"\");\n    setShowExtraParamsModal(false);\n    setExplanation(\"\");\n    setErrorRangeDates({ start: null, end: null });\n    setCategory(\"\");\n    setErrorCauseType(\"employee\");\n    setExtraParamsError(\"\");\n  };\n\n  const handleEditClick = (productId, field) => {\n    setEditingProductId(productId);\n    setEditingField(field);\n    const currentStock =\n      field === \"STORED_STOCK\"\n        ? inventoryMap.get(productId)?.STORED_STOCK\n        : inventoryMap.get(productId)?.ACTIVE_STOCK;\n    setQuantity(currentStock.toFixed(2));\n  };\n\n  useEffect(() => {\n    if (searchQuery === \"\") return setFilteredProducts(products);\n    else {\n      const newData = products.filter((item) =>\n        item.NAME.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n      setFilteredProducts(newData);\n    }\n  }, [searchQuery]);\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  const tableRows = filteredProducts.map((product, index) => (\n    <tr\n      key={product.PRODUCT_ID}\n      className={`${index % 2 === 0 ? \"bg-gray-100\" : \"bg-white\"} ${\n        product.focus ? \"bg-orange-300\" : \"\"\n      }`}\n    >\n      <td className=\"px-4 py-2 border text-black\">{product.NAME}</td>\n      <td className=\"px-4 py-2 border text-black bg-rose-400\">\n        {product.PRODUCT_ID}\n      </td>\n      <td\n        className={`px-4 py-2 border text-black cursor-pointer ${\n          editingField === \"STORED_STOCK\" &&\n          editingProductId === product.PRODUCT_ID\n            ? \"bg-green-400\"\n            : \"\"\n        }`}\n        onClick={() => handleEditClick(product.PRODUCT_ID, \"STORED_STOCK\")}\n      >\n        {editingProductId === product.PRODUCT_ID &&\n        editingField === \"STORED_STOCK\" ? (\n          <input\n            type=\"text\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value)}\n            className=\"w-full p-2 text-black\"\n            autoFocus\n          />\n        ) : (\n          inventoryMap.get(product.PRODUCT_ID)?.STORED_STOCK.toFixed(2) || \"N/A\"\n        )}\n      </td>\n      <td\n        className={`px-4 py-2 border text-black cursor-pointer ${\n          editingField === \"ACTIVE_STOCK\" &&\n          editingProductId === product.PRODUCT_ID\n            ? \"bg-green-400\"\n            : \"\"\n        }`}\n        onClick={() => handleEditClick(product.PRODUCT_ID, \"ACTIVE_STOCK\")}\n      >\n        {editingProductId === product.PRODUCT_ID &&\n        editingField === \"ACTIVE_STOCK\" ? (\n          <input\n            type=\"text\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value)}\n            className=\"w-full p-2 text-black\"\n            autoFocus\n          />\n        ) : (\n          inventoryMap.get(product.PRODUCT_ID)?.ACTIVE_STOCK.toFixed(2) || \"N/A\"\n        )}\n      </td>\n      <td className=\"px-4 py-2 border text-black\">\n        {editingProductId === product.PRODUCT_ID && (\n          <button\n            className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\"\n            onClick={handleUpdateStock}\n          >\n            Commit Change\n          </button>\n        )}\n      </td>\n    </tr>\n  ));\n\n  return (\n    <>\n      <BaseModal\n        visible={props.visible}\n        closeHandler={props.closeHandler}\n        title={\"Manual Stock Override\"}\n        closeName={\"manual\"}\n      >\n        <div className=\"h-full w-full\">\n          <div className=\"flex flex-1 justify-center items-center\">\n            <div className=\"p-6 bg-white rounded-lg shadow max-w-2xl w-full h-70vh\">\n              {changeMessage && (\n                <div className=\"mb-4 p-4 bg-blue-100 text-blue-800 rounded-lg\">\n                  {changeMessage}\n                </div>\n              )}\n              <div className=\"sticky top-0 bg-white z-10\">\n                <input\n                  value={searchQuery}\n                  onChange={(e) => {\n                    setSearchQuery(e.target.value);\n                  }}\n                  className=\"w-full mb-4 p-2 border rounded-lg text-black\"\n                  placeholder=\"Search...\"\n                />\n              </div>\n              <div className=\"h-[55vh] overflow-y-auto\">\n                <table className=\"min-w-full border-collapse\">\n                  <thead className=\"bg-gray-300\">\n                    <tr>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Product Name\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Product ID\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Stored Stock\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Active Stock\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>{tableRows}</tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </BaseModal>\n\n      {showExtraParamsModal && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          <div className=\"bg-white p-6 rounded-lg shadow-lg w-full max-w-md\">\n            <h2 className=\"text-xl font-semibold mb-4 text-black\">\n              Additional Information Required\n            </h2>\n            {extraParamsError && (\n              <div className=\"mb-4 p-2 bg-red-100 text-red-800 rounded-lg\">\n                {extraParamsError}\n              </div>\n            )}\n            <div className=\"mb-4\">\n              <label className=\"block text-black\">Explanation</label>\n              <input\n                type=\"text\"\n                value={explanation}\n                onChange={(e) => setExplanation(e.target.value)}\n                className=\"w-full p-2 border rounded-lg text-black\"\n              />\n            </div>\n            <div className=\"mb-4\">\n              <label className=\"block text-black\">Error Range Start Date</label>\n              <input\n                type=\"datetime-local\"\n                value={errorRangeDates.start || \"\"}\n                onChange={(e) =>\n                  setErrorRangeDates({\n                    ...errorRangeDates,\n                    start: e.target.value,\n                  })\n                }\n                className=\"w-full p-2 border rounded-lg text-black\"\n              />\n            </div>\n            <div className=\"mb-4\">\n              <label className=\"block text-black\">Error Range End Date</label>\n              <input\n                type=\"datetime-local\"\n                value={errorRangeDates.end || \"\"}\n                onChange={(e) =>\n                  setErrorRangeDates({\n                    ...errorRangeDates,\n                    end: e.target.value,\n                  })\n                }\n                className=\"w-full p-2 border rounded-lg text-black\"\n              />\n            </div>\n            <div className=\"mb-4\">\n              <label className=\"block text-black\">Category</label>\n              <input\n                type=\"text\"\n                value={category}\n                onChange={(e) => setCategory(e.target.value)}\n                className=\"w-full p-2 border rounded-lg text-black\"\n              />\n            </div>\n            <div className=\"mb-4\">\n              <label className=\"block text-black\">Error Cause Type</label>\n              <select\n                value={errorCauseType}\n                onChange={(e) => setErrorCauseType(e.target.value)}\n                className=\"w-full p-2 border rounded-lg text-black\"\n              >\n                <option value=\"employee\">Employee</option>\n                <option value=\"operation\">Operation</option>\n              </select>\n            </div>\n            <div className=\"flex justify-end\">\n              <button\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2\"\n                onClick={handleSubmitExtraParams}\n              >\n                Submit\n              </button>\n              <button\n                className=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\"\n                onClick={() => {\n                  setShowExtraParamsModal(false);\n                  setExtraParamsError(\"\");\n                }}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ProductHistory.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ProductTracking.js",["205"],[],"import React, { useEffect, useState } from \"react\";\nimport BaseModal from \"./Base\";\nimport http_handler from \"../HTTP/HTTPS_INTERFACE\";\nconst http = new http_handler();\n\nexport default function ProductTracking(props) {\n  const [products, setProducts] = useState([]);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [editingProductId, setEditingProductId] = useState(null);\n  const [quantity, setQuantity] = useState(\"\");\n  const [changeMessage, setChangeMessage] = useState(\"\");\n\n  const init = async () => {\n    const products = await http.getProducts();\n    setProducts(products.data);\n    setFilteredProducts(products.data);\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  useEffect(() => {\n    if (searchQuery === \"\") return setFilteredProducts(products);\n    else {\n      const newData = products.filter((item) =>\n        item.NAME.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n      setFilteredProducts(newData);\n    }\n  }, [searchQuery]);\n\n  const handleTrackingSubmit = async (productId) => {\n    if (productId) {\n      const data = {\n        productID: productId,\n        quantity: quantity === \"\" ? null : parseInt(quantity),\n      };\n      await http.updateTracking(data);\n\n      // Update local state without refetching\n      setProducts((prevProducts) =>\n        prevProducts.map((p) =>\n          p.PRODUCT_ID === productId\n            ? { ...p, MIN_LIMIT: quantity === \"\" ? null : parseInt(quantity) }\n            : p\n        )\n      );\n      setFilteredProducts((prevFilteredProducts) =>\n        prevFilteredProducts.map((p) =>\n          p.PRODUCT_ID === productId\n            ? { ...p, MIN_LIMIT: quantity === \"\" ? null : parseInt(quantity) }\n            : p\n        )\n      );\n\n      setChangeMessage(\n        quantity === \"\"\n          ? `Removed tracking for ${\n              products.find((p) => p.PRODUCT_ID === productId).NAME\n            }`\n          : `Set tracking limit for ${\n              products.find((p) => p.PRODUCT_ID === productId).NAME\n            } to ${quantity}`\n      );\n\n      setEditingProductId(null);\n      setQuantity(\"\");\n    }\n  };\n\n  const handleEditClick = (productId, currentLimit) => {\n    setEditingProductId(productId);\n    setQuantity(currentLimit != null ? currentLimit.toString() : \"\");\n  };\n\n  const tableRows = filteredProducts.map((product, index) => (\n    <tr\n      key={product.PRODUCT_ID}\n      className={`${\n        product.PRODUCT_ID === editingProductId\n          ? \"bg-orange-300\"\n          : index % 2 === 0\n          ? \"bg-gray-100\"\n          : \"bg-white\"\n      }`}\n    >\n      <td className=\"px-4 py-2 border text-black\">{product.NAME}</td>\n      <td className=\"px-4 py-2 border text-black bg-rose-400\">\n        {product.PRODUCT_ID}\n      </td>\n      <td\n        className={`px-4 py-2 border text-black cursor-pointer ${\n          product.PRODUCT_ID === editingProductId ? \"bg-green-400\" : \"\"\n        }`}\n        onClick={() => handleEditClick(product.PRODUCT_ID, product.MIN_LIMIT)}\n      >\n        {product.PRODUCT_ID === editingProductId ? (\n          <input\n            type=\"text\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value)}\n            className=\"w-full p-2\"\n            autoFocus\n          />\n        ) : product.MIN_LIMIT != null ? (\n          product.MIN_LIMIT\n        ) : (\n          \"Not being tracked\"\n        )}\n      </td>\n      <td className=\"px-4 py-2 border text-black\">\n        {product.PRODUCT_ID === editingProductId && (\n          <button\n            className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out\"\n            onClick={() => handleTrackingSubmit(product.PRODUCT_ID)}\n          >\n            Commit Change\n          </button>\n        )}\n      </td>\n    </tr>\n  ));\n\n  return (\n    <>\n      <BaseModal\n        visible={props.visible}\n        closeHandler={props.closeHandler}\n        title={\"Product Tracking\"}\n        closeName={\"tracking\"}\n      >\n        <div className=\"h-full w-full\">\n          {changeMessage && (\n            <div className=\"mb-4 p-4 bg-blue-100 text-blue-800 rounded-lg\">\n              {changeMessage}\n            </div>\n          )}\n          <div className=\"flex flex-1 justify-center items-center\">\n            <div className=\"p-6 bg-white rounded-lg shadow max-w-2xl w-full\">\n              <div className=\"sticky top-0 bg-white z-10\">\n                <input\n                  value={searchQuery}\n                  onChange={(e) => {\n                    setSearchQuery(e.target.value);\n                  }}\n                  className=\"w-full mb-4 p-2 border rounded-lg text-black\"\n                  placeholder=\"Search...\"\n                />\n              </div>\n              <div className=\"h-[60vh] overflow-y-auto\">\n                <table className=\"min-w-full border-collapse\">\n                  <thead className=\"bg-gray-300\">\n                    <tr>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Product Name\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Product ID\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Tracking Limit\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>{tableRows}</tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </BaseModal>\n    </>\n  );\n}\n","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ReductionLog.js",["206","207"],[],"import React, { useEffect, useState, useRef } from \"react\";\nimport BaseModal from \"./Base\";\nimport http_handler from \"../HTTP/HTTPS_INTERFACE\";\nconst http = new http_handler();\n\nexport default function ReductionLog(props) {\n  const [filteredReduction, setFilteredReduction] = useState([]);\n  const [filterDate, setFilterDate] = useState(\n    new Date().toISOString().split(\"T\")[0]\n  );\n\n  const fetchReduction = async () => {\n    const response = await http.getReductionbyDate({ date: filterDate }); // Assuming getShipments is a method in your http_handler\n    setFilteredReduction(response.data);\n  };\n\n  useEffect(() => {\n    fetchReduction();\n  }, []);\n\n  useEffect(() => {\n    if (filterDate) {\n      fetchReduction();\n    }\n  }, [filterDate]);\n\n  const handleDateFilterChange = (e) => {\n    setFilterDate(e.target.value);\n  };\n\n  const shipmentRows = filteredReduction.map((reduction, index) => (\n    <tr\n      key={reduction.CONSUMP_ID}\n      className={index % 2 === 0 ? \"bg-white border\" : \"bg-gray-200 border\"}\n    >\n      <td className=\"px-4 py-2 text-black bg-rose-300\">\n        {reduction.PRODUCT_ID}\n      </td>\n      <td className=\"px-4 py-2 text-black\">\n        {reduction.PRODUCT_NAME ? reduction.PRODUCT_NAME : \"N/A\"}\n      </td>\n      <td className=\"px-4 py-2 text-black\">{reduction.QUANTITY.toFixed(2)}</td>\n      <td className=\"px-4 py-2 text-black\">\n        {new Date(reduction.DATETIME).toDateString()}\n      </td>\n      <td className=\"px-4 py-2 text-black\">{\"N/A\"}</td>\n      <td className=\"px-4 py-2 text-black\">\n        {reduction.EMPLOYEE_NAME ? reduction.EMPLOYEE_NAME : \"N/A\"}\n      </td>\n    </tr>\n  ));\n\n  return (\n    <>\n      <BaseModal\n        visible={props.visible}\n        closeHandler={props.closeHandler}\n        title={\"View Product Reductions\"}\n        closeName={\"reduction\"}\n      >\n        <div className=\"container mx-auto p-4\">\n          <input\n            type=\"date\"\n            value={filterDate}\n            onChange={handleDateFilterChange}\n            className=\"mb-4 p-2 border rounded-lg text-black\"\n          />\n          <div className=\"overflow-y-auto max-h-96 mx-auto\">\n            <table className=\"min-w-full border-collapse text-center\">\n              {filteredReduction.length > 0 ? (\n                <>\n                  <thead className=\"bg-gray-400\">\n                    <tr>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Product ID\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Product Name\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">Quantity</th>\n                      <th className=\"px-4 py-2 border text-black\">Date</th>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Company ID\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">Employee</th>\n                    </tr>\n                  </thead>\n                  <tbody>{shipmentRows}</tbody>{\" \"}\n                </>\n              ) : (\n                <h1 className=\"text-black text-3xl\">\n                  No Product Reductions for this date\n                </h1>\n              )}\n            </table>\n          </div>\n        </div>\n      </BaseModal>\n    </>\n  );\n}\n","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/SetGlobalGlycerin.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ShipmentLog.js",["208","209"],[],"import React, { useEffect, useState } from \"react\";\nimport BaseModal from \"./Base\";\nimport http_handler from \"../HTTP/HTTPS_INTERFACE\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst http = new http_handler();\n\nexport default function ShipmentLog(props) {\n  const [filteredShipments, setFilteredShipments] = useState([]);\n  const [filterDate, setFilterDate] = useState(new Date());\n  const [highlightedDates, setHighlightedDates] = useState([]);\n\n  const convertToServerDate = (date) => {\n    // Convert the date to the Los Angeles timezone\n    const options = {\n      timeZone: \"America/Los_Angeles\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n    };\n    const laDate = new Intl.DateTimeFormat(\"en-US\", options).format(date);\n\n    const [month, day, year] = laDate.split(\"/\");\n    return `${year}-${month}-${day}`;\n  };\n\n  const fetchShipments = async (date) => {\n    const formattedDate = convertToServerDate(date);\n    const response = await http.getShipmentByDate({ date: formattedDate });\n    setFilteredShipments(response.data);\n  };\n\n  const fetchTrimesterShipments = async () => {\n    const response = await http.getPastYearShipments();\n    \n    setHighlightedDates(response.data.map((shipment) => new Date(shipment)));\n  };\n\n  useEffect(() => {\n    fetchShipments(filterDate);\n    fetchTrimesterShipments();\n  }, []);\n\n  useEffect(() => {\n    if (filterDate) {\n      fetchShipments(filterDate);\n    }\n  }, [filterDate]);\n\n  const handleDateFilterChange = (date) => {\n    setFilterDate(date);\n    fetchShipments(date);\n  };\n\n  const shipmentRows = filteredShipments.map((shipment, index) => (\n    <tr\n      key={shipment.ID}\n      className={index % 2 === 0 ? \"bg-white border\" : \"bg-gray-200 border\"}\n    >\n      <td className=\"px-4 py-2 text-black bg-rose-300\">\n        {shipment.PRODUCT_ID}\n      </td>\n      <td className=\"px-4 py-2 text-black\">\n        {shipment.PRODUCT_NAME ? shipment.PRODUCT_NAME : \"N/A\"}\n      </td>\n      <td className=\"px-4 py-2 text-black\">{shipment.QUANTITY}</td>\n      <td className=\"px-4 py-2 text-black\">\n        {new Date(shipment.SHIPMENT_DATE).toLocaleDateString(\"en-US\", {\n          timeZone: \"America/Los_Angeles\",\n          month: \"2-digit\",\n          day: \"2-digit\",\n          year: \"numeric\",\n        })}\n      </td>\n      <td className=\"px-4 py-2 text-black\">{shipment.COMPANY_ID}</td>\n      <td className=\"px-4 py-2 text-black\">\n        {shipment.EMPLOYEE_NAME ? shipment.EMPLOYEE_NAME : \"N/A\"}\n      </td>\n    </tr>\n  ));\n\n  return (\n    <>\n      <BaseModal\n        visible={props.visible}\n        closeHandler={props.closeHandler}\n        title={\"View Product Shipments\"}\n        closeName={\"shipment\"}\n      >\n        <div className=\"container mx-auto p-4\">\n          <DatePicker\n            selected={filterDate}\n            onChange={handleDateFilterChange}\n            highlightDates={highlightedDates}\n            className=\"mb-4 p-2 border rounded-lg text-black\"\n            dateFormat=\"yyyy-MM-dd\"\n          />\n          <div className=\"overflow-y-auto max-h-130 mx-auto\">\n            <table className=\"min-w-full border-collapse text-center\">\n              {filteredShipments.length > 0 ? (\n                <>\n                  <thead className=\"bg-gray-400\">\n                    <tr>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Product ID\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Product Name\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">Quantity</th>\n                      <th className=\"px-4 py-2 border text-black\">Date</th>\n                      <th className=\"px-4 py-2 border text-black\">\n                        Company ID\n                      </th>\n                      <th className=\"px-4 py-2 border text-black\">Employee</th>\n                    </tr>\n                  </thead>\n                  <tbody>{shipmentRows}</tbody>\n                </>\n              ) : (\n                <h1 className=\"text-black text-3xl\">\n                  No Shipments for this date\n                </h1>\n              )}\n            </table>\n          </div>\n        </div>\n      </BaseModal>\n    </>\n  );\n}\n","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/ViewInventory.js",["210","211","212","213"],[],"import Tooltip from \"@mui/material/Tooltip\";\nimport React, { useEffect, useState } from \"react\";\nimport BaseModal from \"./Base\";\nimport http_handler from \"../HTTP/HTTPS_INTERFACE\";\n\nconst http = new http_handler();\n\nconst DropdownButton = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [options, setOptions] = useState(props.data.data);\n\n  const handleButtonClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleOptionClick = (option) => {\n    props.setData(option);\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      {options.length > 0 && (\n        <div className=\"relative inline-block text-left\">\n          <button\n            type=\"button\"\n            className=\"inline-flex justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-indigo-500\"\n            id=\"options-menu\"\n            aria-haspopup=\"true\"\n            aria-expanded={isOpen ? \"true\" : \"false\"}\n            onClick={handleButtonClick}\n          >\n            {props.dataValue}\n            <svg\n              className=\"-mr-1 ml-2 h-5 w-5\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n              aria-hidden=\"true\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M6.293 6.293a1 1 0 011.414 0L10 8.586l2.293-2.293a1 1 0 011.414 0l.707.707a1 1 0 010 1.414L11.414 10l2.293 2.293a1 1 0 010 1.414l-.707.707a1 1 0 01-1.414 0L10 11.414l-2.293 2.293a1 1 0 01-1.414 0l-.707-.707z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n          </button>\n\n          <div\n            className={`${\n              isOpen ? \"block\" : \"hidden\"\n            } absolute z-50 mt-1 w-full bg-white shadow-lg`}\n            aria-labelledby=\"options-menu\"\n            role=\"menu\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            {options.map((option) => (\n              <button\n                key={option}\n                className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 w-full text-left\"\n                role=\"menuitem\"\n                onClick={() => handleOptionClick(option)}\n              >\n                {option}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default function ViewInventoryModal(props) {\n  const [inventory, setInventory] = useState([]);\n  const [filteredInventory, setFilteredInventory] = useState([]);\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [refresh, setRefresh] = useState(false);\n  const [filter, setFilter] = useState([]);\n\n  const [filterOptions, setFilterOptions] = useState([]);\n  const [selectedFilter, setSelectedFilter] = useState(\"ALL PRODUCTS\");\n  const [metrics, setMetrics] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const refresh_handler = () => {\n    setRefresh(true);\n    setTimeout(() => {\n      setRefresh(false);\n    }, 300);\n  };\n\n  const print_handler = async () => {\n    setIsLoading(true);\n    try {\n      let requestData = {};\n      const selectedOption = filter.find(\n        (item) => item.label === selectedFilter\n      );\n\n      if (selectedFilter !== \"ALL PRODUCTS\") {\n        requestData = {\n          company: selectedOption.typeID,\n        };\n        const requestOptions = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(requestData),\n        };\n        const pdf = await fetch(\n          \"http://192.168.1.176:3001/gen_inv_pdf_by_company\",\n          requestOptions\n        );\n        const pdfBlob = await pdf.blob();\n        const pdfUrl = URL.createObjectURL(pdfBlob);\n        const pdfWindow = window.open(pdfUrl);\n        pdfWindow.onload = () => {\n          URL.revokeObjectURL(pdfUrl);\n        };\n      } else {\n        const requestOptions = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        };\n        const pdf = await fetch(\n          \"http://192.168.1.176:3001/gen_inv_pdf_A4\",\n          requestOptions\n        );\n        const pdfBlob = await pdf.blob();\n        const pdfUrl = URL.createObjectURL(pdfBlob);\n        const pdfWindow = window.open(pdfUrl);\n        pdfWindow.onload = () => {\n          URL.revokeObjectURL(pdfUrl);\n        };\n      }\n    } catch (err) {\n      console.log(err);\n    }\n    setIsLoading(false);\n  };\n\n  const init = async () => {\n    let metric_map = new Map();\n    const metrics = await http.getGlobalMetrics();\n    metrics.perHourMonthTimeFrame.forEach((item) => {\n      const rate = parseFloat(item.total);\n      if (rate > 0) {\n        metric_map.set(item.product_id, rate);\n      } else {\n        metric_map.set(item.product_id, 0);\n      }\n    });\n    setMetrics(metric_map);\n    const productInventory = await http.getProductsInventory();\n    const inventoryMap = new Map(\n      productInventory.data.map((item) => [item.PRODUCT_ID, item])\n    );\n    const products = await http.getProducts();\n    const productFilterMap = new Map(\n      products.data.map((product) => [product.PRODUCT_ID, product])\n    );\n    const formatted_data = products.data.map((data) => {\n      const productInventory = inventoryMap.get(data.PRODUCT_ID);\n      if (productFilterMap.has(data.PRODUCT_ID)) {\n        const productLimit = productFilterMap.get(data.PRODUCT_ID);\n        if (\n          productLimit.MIN_LIMIT != null &&\n          productInventory.STORED_STOCK <= productLimit.MIN_LIMIT\n        ) {\n          return { ...data, focus: false, alert: true, ...productInventory };\n        } else {\n          return { ...data, focus: false, alert: false, ...productInventory };\n        }\n      } else {\n        return { ...data, focus: false, alert: false, ...productInventory };\n      }\n    });\n\n    if (selectedFilter !== \"ALL PRODUCTS\") {\n      const filtered_type = filter.filter((item) => {\n        return item.label === selectedFilter;\n      });\n      const filtered_company = formatted_data.filter((item) => {\n        return item.COMPANY === filtered_type[0].typeID;\n      });\n      setInventory(filtered_company);\n    } else {\n      setInventory(formatted_data);\n    }\n  };\n\n  const getCompanies = async () => {\n    const companies = await http.getPartnerCompanies();\n    const initRun1 = companies.data.map((company) => {\n      return { label: company.NAME, value: false, typeID: company.COMPANY_ID };\n    });\n    initRun1.unshift({ label: \"ALL PRODUCTS\", value: true, typeID: \"0\" });\n    const initRun2 = initRun1.map((item) => {\n      return `${item.label}`;\n    });\n\n    setFilter(initRun1);\n    setFilterOptions(initRun2);\n  };\n\n  useEffect(() => {\n    getCompanies();\n  }, []);\n\n  useEffect(() => {\n    setSearchQuery(\"\");\n    init();\n  }, [selectedFilter]);\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  useEffect(() => {\n    if (refresh) {\n      init();\n    }\n  }, [refresh]);\n\n  useEffect(() => {\n    setFilteredInventory(inventory);\n  }, [inventory]);\n\n  useEffect(() => {\n    if (searchQuery === \"\") return setFilteredInventory(inventory);\n    else {\n      const newData = filteredInventory.filter((item) =>\n        item.NAME.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n      setFilteredInventory(newData);\n    }\n  }, [searchQuery]);\n\n  const tableRows = filteredInventory.map((product, index) => (\n    <tr\n      key={product.PRODUCT_ID}\n      className={`${index % 2 === 0 ? \"bg-gray-100\" : \"bg-white\"} ${\n        product.alert ? \"bg-rose-600\" : \"\"\n      }`}\n      onClick={() => setSelectedProduct(product)}\n    >\n      <td className=\"px-4 py-2 border text-black\">{metrics.get(product.PRODUCT_ID) === 0 ? \"N/A\" : metrics.get(product.PRODUCT_ID)}</td>\n      <td className=\"px-4 py-2 border text-black\">{product.NAME}</td>\n      <Tooltip title=\"TOTAL STOCK\" placement=\"left\" arrow>\n        <td className=\"px-4 py-2 border text-black\">\n          {Math.round(product.STOCK) ?? \"N/A\"}\n        </td>\n      </Tooltip>\n      <Tooltip title=\"Active Stock\" placement=\"left\" arrow>\n        <td className=\"px-4 py-2 border text-black\">\n          {Math.round(product.ACTIVE_STOCK) ?? \"N/A\"}\n        </td>\n      </Tooltip>\n      <Tooltip title=\"Stored Stock\" placement=\"left\" arrow>\n        <td className=\"px-4 py-2 border text-black\">\n          {Math.round(product.STORED_STOCK) ?? \"N/A\"}\n        </td>\n      </Tooltip>\n    </tr>\n  ));\n\n  return (\n    <>\n      <BaseModal\n        visible={props.visible}\n        closeHandler={props.closeHandler}\n        title={\"View Inventory\"}\n        closeName={\"viewInv\"}\n      >\n        <div className=\"container mx-auto p-4 flex flex-col h-full\">\n          <div className=\"flex justify-between mb-3\">\n            <button\n              onClick={() => refresh_handler()}\n              className=\"bg-zuma-login text-white px-4 py-2 rounded-md\"\n            >\n              Refresh\n            </button>\n            <DropdownButton\n              setData={setSelectedFilter}\n              dataValue={selectedFilter}\n              data={{ data: filterOptions }}\n            />\n            <button\n              onClick={() => (!isLoading ? print_handler() : () => {})}\n              className=\"bg-zuma-login text-white px-4 py-2 rounded-md\"\n            >\n              Print\n            </button>\n          </div>\n          {isLoading && <h1 className=\"text-black\">Generating PDF...</h1>}\n          <div className=\"h-[72vh] overflow-y-auto\">\n            <input\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full mb-4 p-2 border rounded-lg text-black sticky top-0 bg-white\"\n              placeholder=\"Search...\"\n            />\n            <table className=\"min-w-full border-collapse\">\n              <thead>\n                <tr className=\"bg-gray-300\">\n                  <th className=\"px-4 py-2 border text-black\">Reduction Rate</th>\n                  <th className=\"px-4 py-2 border text-black\">Name</th>\n                  <th className=\"px-4 py-2 border text-black\">Stock</th>\n                  <th className=\"px-4 py-2 border text-black\">Active Stock</th>\n                  <th className=\"px-4 py-2 border text-black\">Stored Stock</th>\n                </tr>\n              </thead>\n              <tbody>{tableRows}</tbody>\n            </table>\n          </div>\n        </div>\n      </BaseModal>\n    </>\n  );\n}\n","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/manageProdSubViews/CustomProduct.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/manageProdSubViews/EditProducts.js",["214"],[],"import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { FaSearch } from \"react-icons/fa\";\n\nexport default function EditProduct(props) {\n  const [productList, setProductList] = useState([]);\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showProductList, setShowProductList] = useState(false);\n  const [companies, setCompanies] = useState([]);\n  const [productTypes, setProductTypes] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState(\"All\");\n  const [editedFields, setEditedFields] = useState({});\n  const [success, setSuccess] = useState(false);\n  const [funcRegistry, setFuncRegistry] = useState([]);\n  const [actionRows, setActionRows] = useState([]);\n  const [reductionRows, setReductionRows] = useState([]);\n  const [shipmentRows, setShipmentRows] = useState([]);\n  const [tokenChanged, setTokenChanged] = useState(false);\n  const productListRef = useRef(null);\n  const rowRef = useRef(null);\n  const previousSelectedProductIndex = useRef(null);\n  const previousSelectedCompany = useRef(\"All\");\n  const [isOverlayVisible, setIsOverlayVisible] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(null);\n  const [currentSection, setCurrentSection] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const companiesData = await props.api.getPartnerCompanies();\n      setCompanies(companiesData.data);\n      const products = await props.api.getProducts();\n      setProductList(products.data);\n      const productTypesData = await props.api.getProductTypes();\n      setProductTypes(productTypesData.data);\n      const registryData = await props.api.fetchRegistry();\n      setFuncRegistry(registryData);\n    };\n    fetchData();\n  }, [props.api]);\n\n  useEffect(() => {\n    if (selectedProduct) {\n      previousSelectedProductIndex.current = filteredProducts.findIndex(\n        (product) => product.PRODUCT_ID === selectedProduct.PRODUCT_ID\n      );\n      const activationTokens = selectedProduct.ACTIVATION_TOKEN\n        ? selectedProduct.ACTIVATION_TOKEN.split(\" \")\n            .filter((token) => token)\n            .map((token) => parseToken(token, \"activation\"))\n        : [];\n      const reductionTokens = selectedProduct.REDUCTION_TOKEN\n        ? selectedProduct.REDUCTION_TOKEN.split(\" \")\n            .filter((token) => parseToken(token, \"reduction\").product.id)\n            .map((token) => parseToken(token, \"reduction\"))\n        : [];\n      const shipmentTokens = selectedProduct.SHIPMENT_TOKEN\n        ? selectedProduct.SHIPMENT_TOKEN.split(\" \")\n            .filter((token) => token)\n            .map((token) => parseToken(token, \"shipment\"))\n        : [];\n      setActionRows(activationTokens);\n      setReductionRows(reductionTokens);\n      setShipmentRows(shipmentTokens);\n    }\n  }, [selectedProduct]);\n\n  const parseToken = (token, type) => {\n    const parts = token.split(\":\");\n    return {\n      class: parts[0],\n      id: parts[1],\n      product: { id: parts[2], name: getProductName(parts[2]) },\n      param1: parts[3] || \"\",\n      param2: parts[4] || \"\",\n      param3: parts[5] || \"\",\n    };\n  };\n\n  const getProductName = (productId) => {\n    const product = productList.find((p) => p.PRODUCT_ID === productId);\n    return product ? product.NAME : \"\";\n  };\n\n  const handleProductClick = (product) => {\n    setSelectedProduct(product);\n    setEditedFields({\n      TYPE: product.TYPE,\n      COMPANY: product.COMPANY,\n      NAME: product.NAME,\n      UNIT_TYPE: product.UNIT_TYPE,\n      LOCATION: product.LOCATION,\n    });\n    previousSelectedCompany.current = selectedCompany;\n    setShowProductList(false);\n    setSuccess(false);\n  };\n\n  const handleCompanyChange = (event) => {\n    setSelectedCompany(event.target.value);\n  };\n\n  const filteredProducts = productList.filter((product) => {\n    const matchesSearch = product.NAME.toLowerCase().includes(\n      searchQuery.toLowerCase()\n    );\n    const matchesCompany =\n      selectedCompany === \"All\" || product.COMPANY === selectedCompany;\n    return matchesSearch && matchesCompany;\n  });\n\n  const calculateScrollOffset = useCallback(() => {\n    if (rowRef.current && productListRef.current) {\n      const rowHeight = rowRef.current.clientHeight;\n      const containerHeight = productListRef.current.clientHeight;\n      const index = previousSelectedProductIndex.current;\n      if (index !== null && index >= 0) {\n        const offset = index * rowHeight - containerHeight / 2 + rowHeight / 2;\n        productListRef.current.scrollTo({\n          top: offset,\n          behavior: \"smooth\",\n        });\n      }\n    }\n  }, []);\n\n  const toggleProductList = () => {\n    setShowProductList((prev) => {\n      if (!prev && previousSelectedProductIndex.current !== null) {\n        setSelectedCompany(previousSelectedCompany.current);\n        setTimeout(calculateScrollOffset, 0);\n      }\n      return !prev;\n    });\n  };\n\n  const handleFieldChange = (field, value) => {\n    setEditedFields((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const handleCommitChanges = async () => {\n    const updates = Object.keys(editedFields).reduce((acc, key) => {\n      if (editedFields[key] !== selectedProduct[key]) {\n        acc.push({ field: key, value: editedFields[key] });\n      }\n      return acc;\n    }, []);\n\n    const payload = {\n      PRODUCT_ID: selectedProduct.PRODUCT_ID,\n      updates,\n      ACTIVATION_TOKEN: compileTokens(actionRows),\n      REDUCTION_TOKEN: compileTokens(reductionRows),\n      SHIPMENT_TOKEN: compileTokens(shipmentRows),\n      tokenChanged,\n    };\n\n    console.log(\"Payload:\", payload);\n    const response = await props.api.commitChanges(payload);\n\n    if (response.status === true) {\n      // Update local product state\n      setProductList((prevList) =>\n        prevList.map((product) =>\n          product.PRODUCT_ID === selectedProduct.PRODUCT_ID\n            ? { ...product, ...editedFields }\n            : product\n        )\n      );\n      setSuccess(true);\n    } else {\n      // Handle error (optional)\n      console.error(\"Failed to update product\");\n    }\n  };\n\n  const compileTokens = (rows) => {\n    return rows\n      .map(\n        (row) =>\n          `${row.class}:${row.id}:${row.product.id}${\n            row.param1 ? `:${row.param1}` : \"\"\n          }${row.param2 ? `:${row.param2}` : \"\"}${\n            row.param3 ? `:${row.param3}` : \"\"\n          }`\n      )\n      .join(\" \")\n      .trim();\n  };\n\n  const renderField = (label, field, options = []) => {\n    const isEdited =\n      editedFields[field] !== undefined &&\n      editedFields[field] !== selectedProduct[field];\n    const isDropdown = options.length > 0;\n\n    return (\n      <div className=\"mb-4\">\n        <label className=\"block mb-2 text-black\">{label}</label>\n        <div className=\"relative\">\n          {isDropdown ? (\n            <select\n              value={editedFields[field] || selectedProduct[field] || \"\"}\n              onChange={(e) => handleFieldChange(field, e.target.value)}\n              className={`w-full p-2 border ${\n                isEdited ? \"border-green-500\" : \"border-gray-300\"\n              } rounded text-black`}\n            >\n              {options.map((option) => (\n                <option key={option.value} value={option.value}>\n                  {`${option.value} - ${option.label}`}\n                </option>\n              ))}\n            </select>\n          ) : (\n            <input\n              type=\"text\"\n              value={editedFields[field] || selectedProduct[field] || \"\"}\n              onChange={(e) => handleFieldChange(field, e.target.value)}\n              className={`w-full p-2 border ${\n                isEdited ? \"border-green-500\" : \"border-gray-300\"\n              } rounded text-black`}\n            />\n          )}\n          {isEdited && (\n            <span className=\"absolute right-2 top-2 text-green-500\">\n              Edited\n            </span>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const handleDeleteProduct = async () => {\n    const password = prompt(\"Enter password to delete the product:\");\n    if (password === \"zumadelete\") {\n      const confirmation = window.confirm(\n        \"Are you sure you want to delete this product?\"\n      );\n      if (confirmation) {\n        try {\n          const response = await props.api.deleteProduct({\n            PRODUCT_ID: selectedProduct.PRODUCT_ID,\n          });\n          if (response.status === true) {\n            alert(\"Product deleted successfully\");\n            setProductList((prevList) =>\n              prevList.filter(\n                (product) => product.PRODUCT_ID !== selectedProduct.PRODUCT_ID\n              )\n            );\n            setSelectedProduct(null);\n          } else {\n            alert(\"Product deletion failed\");\n          }\n        } catch (error) {\n          console.error(\"Error deleting product:\", error);\n          alert(\"An error occurred while deleting the product\");\n        }\n      }\n    } else {\n      alert(\"Incorrect password. Deletion cancelled.\");\n    }\n  };\n\n  const openOverlay = (index, section) => {\n    setSelectedRowIndex(index);\n    setCurrentSection(section);\n    setIsOverlayVisible(true);\n  };\n\n  const closeOverlay = () => {\n    setIsOverlayVisible(false);\n    setSearchTerm(\"\");\n  };\n\n  const selectProduct = (productID, productName) => {\n    setTokenChanged(true);\n    if (currentSection === \"activation\") {\n      const updatedRows = actionRows.map((row, i) =>\n        i === selectedRowIndex\n          ? { ...row, product: { id: productID, name: productName } }\n          : row\n      );\n      setActionRows(updatedRows);\n    } else if (currentSection === \"reduction\") {\n      const updatedRows = reductionRows.map((row, i) =>\n        i === selectedRowIndex\n          ? { ...row, product: { id: productID, name: productName } }\n          : row\n      );\n      setReductionRows(updatedRows);\n    } else if (currentSection === \"shipment\") {\n      const updatedRows = shipmentRows.map((row, i) =>\n        i === selectedRowIndex\n          ? { ...row, product: { id: productID, name: productName } }\n          : row\n      );\n      setShipmentRows(updatedRows);\n    }\n    closeOverlay();\n  };\n\n  const handleRowChange = (index, e, type) => {\n    const { name, value } = e.target;\n    setTokenChanged(true);\n    if (type === \"activation\") {\n      const updatedRows = actionRows.map((row, i) =>\n        i === index ? { ...row, [name]: value } : row\n      );\n      setActionRows(updatedRows);\n    } else if (type === \"reduction\") {\n      const updatedRows = reductionRows.map((row, i) =>\n        i === index ? { ...row, [name]: value } : row\n      );\n      setReductionRows(updatedRows);\n    } else if (type === \"shipment\") {\n      const updatedRows = shipmentRows.map((row, i) =>\n        i === index ? { ...row, [name]: value } : row\n      );\n      setShipmentRows(updatedRows);\n    }\n  };\n\n  const handleAddRow = (type) => {\n    setTokenChanged(true);\n    if (type === \"activation\") {\n      setActionRows([\n        ...actionRows,\n        {\n          class: \"\",\n          id: \"\",\n          product: { id: \"\", name: \"\" },\n          param1: \"\",\n          param2: \"\",\n          param3: \"\",\n        },\n      ]);\n    } else if (type === \"reduction\") {\n      setReductionRows([\n        ...reductionRows,\n        {\n          class: \"\",\n          id: \"\",\n          product: { id: \"\", name: \"\" },\n          param1: \"\",\n          param2: \"\",\n          param3: \"\",\n        },\n      ]);\n    } else if (type === \"shipment\") {\n      setShipmentRows([\n        ...shipmentRows,\n        {\n          class: \"\",\n          id: \"\",\n          product: { id: \"\", name: \"\" },\n          param1: \"\",\n          param2: \"\",\n          param3: \"\",\n        },\n      ]);\n    }\n  };\n\n  const handleDeleteRow = (index, type) => {\n    setTokenChanged(true);\n    if (type === \"activation\") {\n      const updatedRows = actionRows.filter((row, i) => i !== index);\n      setActionRows(updatedRows);\n    } else if (type === \"reduction\") {\n      const updatedRows = reductionRows.filter((row, i) => i !== index);\n      setReductionRows(updatedRows);\n    } else if (type === \"shipment\") {\n      const updatedRows = shipmentRows.filter((row, i) => i !== index);\n      setShipmentRows(updatedRows);\n    }\n  };\n\n  return (\n    <div className=\"relative h-[62vh]\">\n      <button\n        onClick={toggleProductList}\n        className=\"w-full p-4 bg-orange-400 text-white rounded mb-2 text-lg font-semibold\"\n      >\n        {selectedProduct\n          ? `${selectedProduct.NAME} (press to select another product)`\n          : \"Select a Product\"}\n      </button>\n\n      {showProductList && (\n        <>\n          <div\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-40\"\n            onClick={toggleProductList}\n          ></div>\n          <div className=\"fixed inset-0 flex items-start justify-center z-50 p-4\">\n            <div className=\"bg-white rounded shadow-lg w-full max-w-3xl\">\n              <div className=\"sticky top-0 bg-white z-10 p-4 flex items-center\">\n                <div className=\"relative flex-grow\">\n                  <FaSearch className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                  <input\n                    type=\"text\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    placeholder=\"Search products...\"\n                    className=\"w-full p-2 pl-10 border border-gray-300 rounded text-black bg-gray-100\"\n                  />\n                </div>\n                <button\n                  onClick={toggleProductList}\n                  className=\"ml-4 bg-red-500 text-white p-2 rounded\"\n                >\n                  Back\n                </button>\n              </div>\n              <select\n                value={selectedCompany}\n                onChange={handleCompanyChange}\n                className=\"w-full p-2 border-t border-b border-gray-300 mt-2 text-black bg-gray-100\"\n              >\n                <option value=\"All\">All Companies</option>\n                {companies.map((company) => (\n                  <option key={company.COMPANY_ID} value={company.COMPANY_ID}>\n                    {company.NAME}\n                  </option>\n                ))}\n              </select>\n              <div\n                ref={productListRef}\n                className=\"h-[40vh] overflow-y-auto border-t border-gray-300\"\n              >\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-400 sticky top-0 z-10\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider\">\n                        Name\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider\">\n                        Product ID\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider\">\n                        Type\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider\">\n                        Company\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-gray-700 text-white divide-y divide-gray-600\">\n                    {filteredProducts.map((product, index) => (\n                      <tr\n                        key={index}\n                        ref={index === 0 ? rowRef : null}\n                        onClick={() => handleProductClick(product)}\n                        className={`cursor-pointer ${\n                          selectedProduct === product\n                            ? \"bg-orange-500 text-white font-bold\"\n                            : \"\"\n                        } ${\n                          index % 2 === 0\n                            ? selectedProduct === product\n                              ? \"bg-orange-500 text-white font-bold\"\n                              : \"bg-gray-600 text-white\"\n                            : selectedProduct === product\n                            ? \"bg-orange-500 text-white font-bold\"\n                            : \"bg-gray-500 text-white\"\n                        }`}\n                      >\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                          {product.NAME}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                          {product.PRODUCT_ID}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                          {product.TYPE}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                          {product.COMPANY}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n\n      {selectedProduct && (\n        <div className=\"mt-4\">\n          {success && (\n            <div className=\"mb-4 p-4 bg-green-100 text-green-800 rounded\">\n              Successfully changed objects\n            </div>\n          )}\n          {renderField(\"Name\", \"NAME\")}\n          {renderField(\n            \"Type\",\n            \"TYPE\",\n            productTypes.map((pt) => ({ value: pt.TYPE_ID, label: pt.TYPE }))\n          )}\n          {renderField(\n            \"Company\",\n            \"COMPANY\",\n            companies.map((c) => ({ value: c.COMPANY_ID, label: c.NAME }))\n          )}\n          {renderField(\"Unit Type\", \"UNIT_TYPE\", [\n            { value: \"UNIT\", label: \"UNIT\" },\n            { value: \"BUNDLE\", label: \"BUNDLE\" },\n          ])}\n          {renderField(\"Location\", \"LOCATION\", [\n            { value: \"4322\", label: \"4322\" },\n          ])}\n          {/* Add more fields as needed */}\n\n          {/* Token List Sections */}\n          <div className=\"w-full mb-4 bg-gray-700 p-4 rounded\">\n            <h3 className=\"mb-2 text-white\">Activation Tokens</h3>\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr>\n                  <th className=\"border p-2 text-white\">Class</th>\n                  <th className=\"border p-2 text-white\">ID</th>\n                  <th className=\"border p-2 text-white\">Product</th>\n                  <th className=\"border p-2 text-white\">Param1</th>\n                  <th className=\"border p-2 text-white\">Param2</th>\n                  <th className=\"border p-2 text-white\">Param3</th>\n                  <th className=\"border p-2 text-white\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {actionRows.map((row, index) => (\n                  <tr\n                    key={index}\n                    className={`${\n                      row.class ||\n                      row.id ||\n                      row.product.id ||\n                      row.param1 ||\n                      row.param2 ||\n                      row.param3\n                        ? \"bg-white\"\n                        : \"\"\n                    }`}\n                  >\n                    <td className=\"border p-2\">\n                      <select\n                        name=\"class\"\n                        value={row.class}\n                        onChange={(e) =>\n                          handleRowChange(index, e, \"activation\")\n                        }\n                        className=\"w-full p-2 text-black\"\n                      >\n                        <option value=\"\">Select Class</option>\n                        <option value=\"AC\">AC</option>\n                        <option value=\"RD\">RD</option>\n                        <option value=\"UP\">UP</option>\n                      </select>\n                    </td>\n                    <td className=\"border p-2\">\n                      <select\n                        name=\"id\"\n                        value={row.id}\n                        onChange={(e) =>\n                          handleRowChange(index, e, \"activation\")\n                        }\n                        className=\"w-full p-2 text-black\"\n                      >\n                        <option value=\"\">Select ID</option>\n                        {funcRegistry\n                          .filter((func) => func.class === row.class)\n                          .map((func) => (\n                            <option key={func.id} value={func.id}>\n                              {func.name}\n                            </option>\n                          ))}\n                      </select>\n                    </td>\n                    <td className=\"border p-2\">\n                      <button\n                        onClick={() => openOverlay(index, \"activation\")}\n                        className=\"w-full p-2 bg-gray-300 text-black\"\n                      >\n                        {row.product.name || \"Select Product\"}\n                      </button>\n                    </td>\n                    <td className=\"border p-2\">\n                      <input\n                        type=\"text\"\n                        name=\"param1\"\n                        value={row.param1}\n                        onChange={(e) =>\n                          handleRowChange(index, e, \"activation\")\n                        }\n                        className=\"w-full p-2 text-black\"\n                      />\n                    </td>\n                    <td className=\"border p-2\">\n                      <input\n                        type=\"text\"\n                        name=\"param2\"\n                        value={row.param2}\n                        onChange={(e) =>\n                          handleRowChange(index, e, \"activation\")\n                        }\n                        className=\"w-full p-2 text-black\"\n                      />\n                    </td>\n                    <td className=\"border p-2\">\n                      <input\n                        type=\"text\"\n                        name=\"param3\"\n                        value={row.param3}\n                        onChange={(e) =>\n                          handleRowChange(index, e, \"activation\")\n                        }\n                        className=\"w-full p-2 text-black\"\n                      />\n                    </td>\n                    <td className=\"border p-2\">\n                      <button\n                        onClick={() => handleDeleteRow(index, \"activation\")}\n                        className=\"w-full p-2 bg-red-500 text-white\"\n                      >\n                        Delete\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <button\n              onClick={() => handleAddRow(\"activation\")}\n              className=\"w-full p-2 bg-orange-500 text-white mt-2\"\n            >\n              Add Activation Token\n            </button>\n          </div>\n\n          <div className=\"w-full mb-4 bg-gray-700 p-4 rounded\">\n            <h3 className=\"mb-2 text-white\">Reduction Tokens</h3>\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr>\n                  <th className=\"border p-2 text-white\">Class</th>\n                  <th className=\"border p-2 text-white\">ID</th>\n                  <th className=\"border p-2 text-white\">Product</th>\n                  <th className=\"border p-2 text-white\">Param1</th>\n                  <th className=\"border p-2 text-white\">Param2</th>\n                  <th className=\"border p-2 text-white\">Param3</th>\n                  <th className=\"border p-2 text-white\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {reductionRows.map((row, index) => (\n                  <tr\n                    key={index}\n                    className={`${\n                      row.class ||\n                      row.id ||\n                      row.product.id ||\n                      row.param1 ||\n                      row.param2 ||\n                      row.param3\n                        ? \"bg-white\"\n                        : \"\"\n                    }`}\n                  >\n                    <td className=\"border p-2\">\n                      <select\n                        name=\"class\"\n                        value={row.class}\n                        onChange={(e) => handleRowChange(index, e, \"reduction\")}\n                        className=\"w-full p-2 text-black\"\n                      >\n                        <option value=\"\">Select Class</option>\n                        <option value=\"CM\">CM</option>\n                        <option value=\"CMUP\">CMUP</option>\n                      </select>\n                    </td>\n                    <td className=\"border p-2\">\n                      <select\n                        name=\"id\"\n                        value={row.id}\n                        onChange={(e) => handleRowChange(index, e, \"reduction\")}\n                        className=\"w-full p-2 text-black\"\n                      >\n                        <option value=\"\">Select ID</option>\n                        {funcRegistry\n                          .filter((func) => func.class === row.class)\n                          .map((func) => (\n                            <option key={func.id} value={func.id}>\n                              {func.name}\n                            </option>\n                          ))}\n                      </select>\n                    </td>\n                    <td className=\"border p-2\">\n                      <button\n                        onClick={() => openOverlay(index, \"reduction\")}\n                        className=\"w-full p-2 bg-gray-300 text-black\"\n                      >\n                        {row.product.name || \"Select Product\"}\n                      </button>\n                    </td>\n                    <td className=\"border p-2\">\n                      <input\n                        type=\"text\"\n                        name=\"param1\"\n                        value={row.param1}\n                        onChange={(e) => handleRowChange(index, e, \"reduction\")}\n                        className=\"w-full p-2 text-black\"\n                      />\n                    </td>\n                    <td className=\"border p-2\">\n                      <input\n                        type=\"text\"\n                        name=\"param2\"\n                        value={row.param2}\n                        onChange={(e) => handleRowChange(index, e, \"reduction\")}\n                        className=\"w-full p-2 text-black\"\n                      />\n                    </td>\n                    <td className=\"border p-2\">\n                      <input\n                        type=\"text\"\n                        name=\"param3\"\n                        value={row.param3}\n                        onChange={(e) => handleRowChange(index, e, \"reduction\")}\n                        className=\"w-full p-2 text-black\"\n                      />\n                    </td>\n                    <td className=\"border p-2\">\n                      <button\n                        onClick={() => handleDeleteRow(index, \"reduction\")}\n                        className=\"w-full p-2 bg-red-500 text-white\"\n                      >\n                        Delete\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <button\n              onClick={() => handleAddRow(\"reduction\")}\n              className=\"w-full p-2 bg-orange-500 text-white mt-2\"\n            >\n              Add Reduction Token\n            </button>\n          </div>\n\n          <div className=\"w-full mb-4 bg-gray-700 p-4 rounded\">\n            <h3 className=\"mb-2 text-white\">Shipment Tokens</h3>\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr>\n                  <th className=\"border p-2 text-white\">Class</th>\n                  <th className=\"border p-2 text-white\">ID</th>\n                  <th className=\"border p-2 text-white\">Product</th>\n                  <th className=\"border p-2 text-white\">Param1</th>\n                  <th className=\"border p-2 text-white\">Param2</th>\n                  <th className=\"border p-2 text-white\">Param3</th>\n                  <th className=\"border p-2 text-white\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {shipmentRows.map((row, index) => (\n                  <tr\n                    key={index}\n                    className={`${\n                      row.class ||\n                      row.id ||\n                      row.product.id ||\n                      row.param1 ||\n                      row.param2 ||\n                      row.param3\n                        ? \"bg-white\"\n                        : \"\"\n                    }`}\n                  >\n                    <td className=\"border p-2\">\n                      <select\n                        name=\"class\"\n                        value={row.class}\n                        onChange={(e) => handleRowChange(index, e, \"shipment\")}\n                        className=\"w-full p-2 text-black\"\n                      >\n                        <option value=\"\">Select Class</option>\n                        <option value=\"SH\">SH</option>\n                        <option value=\"UP\">UP</option>\n                      </select>\n                    </td>\n                    <td className=\"border p-2\">\n                      <select\n                        name=\"id\"\n                        value={row.id}\n                        onChange={(e) => handleRowChange(index, e, \"shipment\")}\n                        className=\"w-full p-2 text-black\"\n                      >\n                        <option value=\"\">Select ID</option>\n                        {funcRegistry\n                          .filter((func) => func.class === row.class)\n                          .map((func) => (\n                            <option key={func.id} value={func.id}>\n                              {func.name}\n                            </option>\n                          ))}\n                      </select>\n                    </td>\n                    <td className=\"border p-2\">\n                      <button\n                        onClick={() => openOverlay(index, \"shipment\")}\n                        className=\"w-full p-2 bg-gray-300 text-black\"\n                      >\n                        {row.product.name || \"Select Product\"}\n                      </button>\n                    </td>\n                    <td className=\"border p-2\">\n                      <input\n                        type=\"text\"\n                        name=\"param1\"\n                        value={row.param1}\n                        onChange={(e) => handleRowChange(index, e, \"shipment\")}\n                        className=\"w-full p-2 text-black\"\n                      />\n                    </td>\n                    <td className=\"border p-2\">\n                      <input\n                        type=\"text\"\n                        name=\"param2\"\n                        value={row.param2}\n                        onChange={(e) => handleRowChange(index, e, \"shipment\")}\n                        className=\"w-full p-2 text-black\"\n                      />\n                    </td>\n                    <td className=\"border p-2\">\n                      <input\n                        type=\"text\"\n                        name=\"param3\"\n                        value={row.param3}\n                        onChange={(e) => handleRowChange(index, e, \"shipment\")}\n                        className=\"w-full p-2 text-black\"\n                      />\n                    </td>\n                    <td className=\"border p-2\">\n                      <button\n                        onClick={() => handleDeleteRow(index, \"shipment\")}\n                        className=\"w-full p-2 bg-red-500 text-white\"\n                      >\n                        Delete\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <button\n              onClick={() => handleAddRow(\"shipment\")}\n              className=\"w-full p-2 bg-orange-500 text-white mt-2\"\n            >\n              Add Shipment Token\n            </button>\n          </div>\n\n          <button\n            onClick={handleCommitChanges}\n            className=\"w-full p-4 bg-green-500 text-white rounded text-lg font-semibold mt-8\"\n          >\n            Commit Changes\n          </button>\n          <button\n            onClick={handleDeleteProduct}\n            className=\"w-full mt-2 p-4 bg-red-500 text-white rounded text-lg font-semibold\"\n          >\n            Delete Product\n          </button>\n        </div>\n      )}\n\n      {isOverlayVisible && (\n        <div\n          style={{\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: \"rgba(0,0,0,0.5)\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            zIndex: 1000,\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: \"white\",\n              padding: \"20px\",\n              borderRadius: \"8px\",\n              width: \"80%\",\n              maxHeight: \"80%\",\n              overflowY: \"auto\",\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                marginBottom: \"1em\",\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Search products...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full p-2 text-black\"\n              />\n              <button\n                onClick={closeOverlay}\n                style={{\n                  backgroundColor: \"red\",\n                  color: \"white\",\n                  marginLeft: \"10px\",\n                  padding: \"10px\",\n                  borderRadius: \"4px\",\n                }}\n              >\n                Back\n              </button>\n            </div>\n            <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\n              <thead>\n                <tr>\n                  <th\n                    style={{\n                      border: \"1px solid black\",\n                      padding: \"10px\",\n                      backgroundColor: \"black\",\n                      color: \"white\",\n                    }}\n                  >\n                    Product Name\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredProducts.map((product, index) => (\n                  <tr\n                    key={product.PRODUCT_ID}\n                    onClick={() =>\n                      selectProduct(product.PRODUCT_ID, product.NAME)\n                    }\n                    style={{\n                      cursor: \"pointer\",\n                      borderBottom: \"1px solid black\",\n                      backgroundColor: index % 2 === 0 ? \"white\" : \"#d1d5db\",\n                    }}\n                  >\n                    <td style={{ padding: \"10px\", color: \"black\" }}>\n                      {product.NAME}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/manageProdSubViews/EditTokens.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/manageProdSubViews/Navbar.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/Modals/manageProdSubViews/globalGlycerin.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/inventory/main.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/login/login.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/pages/_app.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/pages/_document.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/pages/api/auth/[...nextauth].js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/pages/index.js",[],[],"/Users/oscy/Documents/CSE/DASHBOARD/ZUMA_DASHBOARD/src/components/dashboard/pages/employee/components/scheduler.js",["215"],[],"import React from \"react\";\nimport { Calendar, dateFnsLocalizer } from \"react-big-calendar\";\nimport format from \"date-fns/format\";\nimport parse from \"date-fns/parse\";\nimport startOfWeek from \"date-fns/startOfWeek\";\nimport getDay from \"date-fns/getDay\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport http_handler from \"../Fetch/HTTPS_INTERFACE\";\nimport { set } from \"date-fns\";\n\nconst https = new http_handler();\nconst locales = { \"en-US\": require(\"date-fns/locale/en-US\") };\n\nconst localizer = dateFnsLocalizer({\n  format,\n  parse,\n  startOfWeek,\n  getDay,\n  locales,\n});\n// Format 'YYYY-MM-DD' in Pacific Time\nconst formatDateToPacific = (date) => {\n  return new Intl.DateTimeFormat(\"en-CA\", {\n    timeZone: \"America/Los_Angeles\",\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n  }).format(new Date(date));\n};\n\n// Convert UTC to 'HH:00' in Pacific Time\nconst formatTimeToPacific = (utcTime) => {\n  return (\n    new Date(utcTime)\n      .toLocaleTimeString(\"en-US\", {\n        timeZone: \"America/Los_Angeles\",\n        hour12: false,\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      })\n      .split(\":\")[0]\n      .padStart(2, \"0\") + \":00\"\n  );\n};\n\n// Convert server response to local format\nconst toLocalShiftData = (serverDataArray) => {\n  const result = {};\n  for (const entry of serverDataArray) {\n    const dateKey = formatDateToPacific(entry.SHIFT_DATE);\n    result[dateKey] = {\n      SHIFT_START: formatTimeToPacific(entry.SHIFT_START),\n      SHIFT_END: formatTimeToPacific(entry.SHIFT_END),\n      calledOff: entry.VALID === 0,\n    };\n  }\n  return result;\n};\n\n// Get hour difference between times\nconst getHourDiff = (oldTime, newTime) => {\n  const [oldHour] = oldTime.split(\":\").map(Number);\n  const [newHour] = newTime.split(\":\").map(Number);\n  return newHour - oldHour;\n};\n\nconst processShiftChanges = async (\n  shiftData,\n  originalShiftData,\n  employeeId\n) => {\n  const changes = [];\n\n  for (const date in shiftData) {\n    const current = shiftData[date];\n    const original = originalShiftData[date];\n    if (!original) continue;\n\n    // Check SHIFT_START\n    if (current.SHIFT_START !== original.SHIFT_START) {\n      console.log(\n        \"SHIFT_START changed:\",\n        date,\n        current.SHIFT_START,\n        original.SHIFT_START\n      );\n      const parsedDate = new Date(`${date}T12:00:00-08:00`);\n      changes.push(() =>\n        https.transform_shift({\n          shiftOption: \"start\",\n          e_id: employeeId,\n          date: parsedDate,\n          hours: getHourDiff(original.SHIFT_START, current.SHIFT_START),\n        })\n      );\n    }\n\n    // Check SHIFT_END\n    if (current.SHIFT_END !== original.SHIFT_END) {\n      const parsedDate = new Date(`${date}T12:00:00-08:00`);\n      changes.push(() =>\n        https.transform_shift({\n          shiftOption: \"end\",\n          e_id: employeeId,\n          date: parsedDate,\n          hours: getHourDiff(original.SHIFT_END, current.SHIFT_END),\n        })\n      );\n    }\n\n    // Check calledOff → only send if changed\n    if (current.VALID !== original.VALID) {\n      const parsedDate = new Date(`${date}T12:00:00-08:00`);\n\n      changes.push(() =>\n        https.removeShift({\n          e_id: employeeId,\n          date: parsedDate,\n          revert: !current.VALID, // true = restore, false = remove\n        })\n      );\n    }\n  }\n\n  for (const call of changes) {\n    try {\n      await call();\n    } catch (err) {\n      console.error(\"❌ Failed to process change:\", err);\n    }\n  }\n  window.alert(\"✅ All changes processed successfully!\");\n  console.log(\"✅ All shift changes processed.\");\n};\n\nconst getDateRangeFor3MonthWindow = () => {\n  const now = new Date();\n\n  const start = new Date(now);\n  start.setMonth(now.getMonth() - 3);\n  start.setHours(0, 0, 0, 0);\n\n  const end = new Date(now);\n  end.setMonth(now.getMonth() + 3);\n  end.setHours(23, 59, 59, 999);\n\n  return {\n    startDate: start.toISOString().split(\"T\")[0], // \"YYYY-MM-DD\"\n    endDate: end.toISOString().split(\"T\")[0],\n  };\n};\n\nconst MyCalendar = ({ employee }) => {\n  const [shiftData, setShiftData] = React.useState({});\n  const [originalShiftData, setOriginalShiftData] = React.useState({});\n  const fetchData = async () => {\n    const { startDate, endDate } = getDateRangeFor3MonthWindow();\n\n    const data = await https.getShiftLogs(employee.id, startDate, endDate);\n\n    const formattedData = {};\n\n    data.forEach((item) => {\n      const key = formatDateToPacific(item.SHIFT_DATE); // 'YYYY-MM-DD'\n      formattedData[key] = {\n        SHIFT_START: formatTimeToPacific(item.SHIFT_START),\n        SHIFT_END: formatTimeToPacific(item.SHIFT_END),\n        VALID: item.VALID === 0,\n      };\n    });\n\n    setShiftData(formattedData);\n    setOriginalShiftData(formattedData);\n  };\n\n  React.useEffect(() => {\n    fetchData();\n  }, [employee]);\n\n  const handleChange = (date, type, value) => {\n    const key = date.toISOString().split(\"T\")[0];\n    const shiftType = type === \"start\" ? \"SHIFT_START\" : \"SHIFT_END\";\n\n    // Extract only hour, ignore minutes\n    const [hour] = value.split(\":\");\n    const normalizedTime = `${hour.padStart(2, \"0\")}:00`;\n\n    setShiftData((prev) => ({\n      ...prev,\n      [key]: {\n        ...prev[key],\n        [shiftType]: normalizedTime,\n      },\n    }));\n  };\n\n  const handleCheckbox = (date) => {\n    const key = date.toISOString().split(\"T\")[0];\n    setShiftData((prev) => ({\n      ...prev,\n      [key]: {\n        ...prev[key],\n        VALID: !prev[key]?.VALID,\n      },\n    }));\n  };\n  const isWeekend = (date) => {\n    const day = date.getDay(); // 0 = Sunday, 6 = Saturday\n    return day === 0 || day === 6;\n  };\n\n  const CustomDateCellWrapper = ({ children, value }) => {\n    const key = value.toISOString().split(\"T\")[0];\n    const shift = shiftData[key] || {};\n    const original = originalShiftData?.[key] || {};\n    const startChanged = shift.SHIFT_START !== original.SHIFT_START;\n    const endChanged = shift.SHIFT_END !== original.SHIFT_END;\n    const isOutOfScope = !shiftData[key];\n\n    const isWeekend = (date) => {\n      const day = date.getDay(); // 0 = Sunday, 6 = Saturday\n      return day === 0 || day === 6;\n    };\n\n    const weekend = isWeekend(value);\n\n    return (\n      <div\n        style={{\n          position: \"relative\",\n          height: \"100%\",\n          backgroundColor: weekend\n            ? \"#dcdcdcff\"\n            : shift.VALID\n            ? \"#323f446c\" // ← slightly darker shade when called off\n            : \"#abc0acff\", // ← default\n          color: \"black\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: weekend ? \"center\" : \"flex-start\",\n          fontSize: weekend ? \"0.75rem\" : \"inherit\",\n          fontWeight: weekend ? 500 : \"normal\",\n          padding: \"0.25rem\",\n          textAlign: \"center\",\n        }}\n      >\n        {weekend ? (\n          <div style={{ padding: \"0.25rem\", width: \"100%\", marginTop: \"30px\" }}>\n            <label style={{ color: \"black\" }}>Non-Business Day</label>\n            <input\n              type=\"time\"\n              style={{\n                width: \"100%\",\n                backgroundColor: \"transparent\", // or 'white' if needed\n                border: \"1px solid transparent\",\n                color: \"transparent\",\n                outline: \"none\",\n                fontWeight: \"500\",\n                fontSize: \"0.9rem\",\n                WebkitAppearance: \"none\", // removes default style in Chrome\n                MozAppearance: \"none\",\n                appearance: \"none\",\n              }}\n              disabled={true}\n              value={\"Weekend\"}\n            />\n          </div>\n        ) : (\n          <>\n            {isOutOfScope == true ? (\n              <>\n                <div\n                  style={{\n                    fontSize: \"0.75rem\",\n                    color: \"#666\",\n                    marginTop: \"40px\",\n                    width: \"100%\",\n                  }}\n                >\n                  🔒 Manager Update Schedule For Employee\n                </div>\n                <div style={{ padding: \"0.25rem\", width: \"100%\" }}>\n                  <input\n                    type=\"time\"\n                    value={shift.SHIFT_START || \"\"}\n                    onChange={(e) =>\n                      handleChange(value, \"start\", e.target.value)\n                    }\n                    style={{\n                      width: \"100%\",\n                      marginBottom: \"6px\",\n                      backgroundColor: \"transparent\", // or 'white' if needed\n                      border: \"1px solid transparent\",\n                      color: \"transparent\",\n                      outline: \"none\",\n                      fontWeight: \"500\",\n                      fontSize: \"0.9rem\",\n                      WebkitAppearance: \"none\", // removes default style in Chrome\n                      MozAppearance: \"none\",\n                      appearance: \"none\",\n                    }}\n                    disabled={isOutOfScope}\n                  />\n                </div>\n              </>\n            ) : (\n              <>\n                {\" \"}\n                <div\n                  style={{\n                    position: \"relative\",\n                    top: 2,\n                    right: 2,\n                    zIndex: 1,\n                    opacity: isOutOfScope ? 0.5 : 1,\n                  }}\n                >\n                  <label\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                      marginTop: \"1.5rem\",\n                      paddingRight: \"0.2rem\",\n                      paddingLeft: \"0.2rem\",\n                      color: shift.VALID ? \"white\" : \"rgba(76, 74, 45, 1)\",\n                    }}\n                  >\n                    Called Off\n                    <input\n                      style={{\n                        marginLeft: \"0.6rem\",\n                        backgroundColor: \"#6c7f6f\", // or 'white' if needed\n                        border: \"2px solid white\",\n                        width: \"1.2rem\",\n                        height: \"1.2rem\",\n                        color: \"white\",\n                        padding: \"4px 6px\",\n                        borderRadius: \"4px\",\n                        outline: \"none\",\n                        fontWeight: \"500\",\n                        fontSize: \"0.9rem\",\n                        WebkitAppearance: \"none\", // removes default style in Chrome\n                        MozAppearance: \"none\",\n                        appearance: \"none\",\n                      }}\n                      type=\"checkbox\"\n                      checked={shift.VALID || false}\n                      onChange={() => handleCheckbox(value)}\n                      title=\"Called Off\"\n                      disabled={isOutOfScope}\n                    />\n                  </label>\n                </div>\n                <div style={{ padding: \"0.25rem\", width: \"100%\" }}>\n                  <input\n                    type=\"time\"\n                    value={shift.SHIFT_START || \"\"}\n                    onChange={(e) =>\n                      handleChange(value, \"start\", e.target.value)\n                    }\n                    style={{\n                      width: \"100%\",\n                      marginBottom: \"4px\",\n                      backgroundColor: startChanged ? \"#fff3cd\" : \"#fefefe\", // soft yellow\n                      border: \"1px solid #ccc\",\n                      borderRadius: \"4px\",\n                      padding: \"2px 4px\",\n                      fontWeight: 500,\n                      color: \"#333\",\n                    }}\n                    disabled={isOutOfScope || shift.VALID}\n                  />\n\n                  <input\n                    type=\"time\"\n                    value={shift.SHIFT_END || \"\"}\n                    onChange={(e) => handleChange(value, \"end\", e.target.value)}\n                    style={{\n                      width: \"100%\",\n                      backgroundColor: endChanged ? \"#fff3cd\" : \"#fefefe\", // soft yellow\n                      border: \"1px solid #ccc\",\n                      borderRadius: \"4px\",\n                      padding: \"2px 4px\",\n                      fontWeight: 500,\n                      color: \"#333\",\n                    }}\n                    disabled={isOutOfScope || shift.VALID}\n                  />\n                </div>\n              </>\n            )}\n          </>\n        )}\n        {children}\n      </div>\n    );\n  };\n\n  return (\n    <div style={{ height: \"73vh\", color: \"black\" }}>\n      <Calendar\n        localizer={localizer}\n        defaultView=\"month\"\n        views={[\"month\"]}\n        components={{\n          dateCellWrapper: CustomDateCellWrapper,\n        }}\n        style={{\n          height: \"100%\",\n          backgroundColor: \"white\",\n          color: \"black\",\n        }}\n      />\n      <button\n\n        className=\"bg-emerald-900 hover:bg-emerald-800 text-white px-4 py-2 w-full \"\n        onClick={() => {\n          processShiftChanges(shiftData, originalShiftData, employee.id);\n        }}\n      >\n        Save Changes\n      </button>\n    </div>\n  );\n};\n\nexport default MyCalendar;\n",{"ruleId":"216","severity":1,"message":"217","line":76,"column":6,"nodeType":"218","endLine":76,"endColumn":19,"suggestions":"219"},{"ruleId":"216","severity":1,"message":"220","line":453,"column":6,"nodeType":"218","endLine":453,"endColumn":11,"suggestions":"221"},{"ruleId":"216","severity":1,"message":"222","line":464,"column":6,"nodeType":"218","endLine":464,"endColumn":16,"suggestions":"223"},{"ruleId":"216","severity":1,"message":"224","line":19,"column":6,"nodeType":"218","endLine":19,"endColumn":8,"suggestions":"225"},{"ruleId":"216","severity":1,"message":"224","line":25,"column":6,"nodeType":"218","endLine":25,"endColumn":18,"suggestions":"226"},{"ruleId":"216","severity":1,"message":"227","line":45,"column":6,"nodeType":"218","endLine":45,"endColumn":19,"suggestions":"228"},{"ruleId":"216","severity":1,"message":"229","line":130,"column":6,"nodeType":"218","endLine":130,"endColumn":19,"suggestions":"230"},{"ruleId":"216","severity":1,"message":"229","line":32,"column":6,"nodeType":"218","endLine":32,"endColumn":19,"suggestions":"231"},{"ruleId":"216","severity":1,"message":"232","line":19,"column":6,"nodeType":"218","endLine":19,"endColumn":8,"suggestions":"233"},{"ruleId":"216","severity":1,"message":"232","line":25,"column":6,"nodeType":"218","endLine":25,"endColumn":18,"suggestions":"234"},{"ruleId":"216","severity":1,"message":"235","line":43,"column":6,"nodeType":"218","endLine":43,"endColumn":8,"suggestions":"236"},{"ruleId":"216","severity":1,"message":"237","line":49,"column":6,"nodeType":"218","endLine":49,"endColumn":18,"suggestions":"238"},{"ruleId":"216","severity":1,"message":"239","line":219,"column":6,"nodeType":"218","endLine":219,"endColumn":22,"suggestions":"240"},{"ruleId":"216","severity":1,"message":"239","line":223,"column":6,"nodeType":"218","endLine":223,"endColumn":8,"suggestions":"241"},{"ruleId":"216","severity":1,"message":"239","line":229,"column":6,"nodeType":"218","endLine":229,"endColumn":15,"suggestions":"242"},{"ruleId":"216","severity":1,"message":"243","line":243,"column":6,"nodeType":"218","endLine":243,"endColumn":19,"suggestions":"244"},{"ruleId":"216","severity":1,"message":"245","line":66,"column":6,"nodeType":"218","endLine":66,"endColumn":23,"suggestions":"246"},{"ruleId":"216","severity":1,"message":"247","line":178,"column":6,"nodeType":"218","endLine":178,"endColumn":16,"suggestions":"248"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getEmployeeMetrics'. Either include it or remove the dependency array.","ArrayExpression",["249"],"React Hook useEffect has a missing dependency: 'local_data.gen_emp_all'. Either include it or remove the dependency array.",["250"],"React Hook useEffect has a missing dependency: 'local_data.emp_data'. Either include it or remove the dependency array.",["251"],"React Hook useEffect has a missing dependency: 'fetchActivation'. Either include it or remove the dependency array.",["252"],["253"],"React Hook useEffect has a missing dependency: 'companies'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredCompanies' needs the current value of 'companies'.",["254"],"React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredProducts' needs the current value of 'products'.",["255"],["256"],"React Hook useEffect has a missing dependency: 'fetchReduction'. Either include it or remove the dependency array.",["257"],["258"],"React Hook useEffect has missing dependencies: 'fetchShipments' and 'filterDate'. Either include them or remove the dependency array.",["259"],"React Hook useEffect has a missing dependency: 'fetchShipments'. Either include it or remove the dependency array.",["260"],"React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",["261"],["262"],["263"],"React Hook useEffect has missing dependencies: 'filteredInventory' and 'inventory'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredInventory' needs the current value of 'inventory'.",["264"],"React Hook useEffect has missing dependencies: 'filteredProducts' and 'parseToken'. Either include them or remove the dependency array.",["265"],"React Hook React.useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["266"],{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"279","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"286","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},"Update the dependencies array to be: [currentDate, getEmployeeMetrics]",{"range":"301","text":"302"},"Update the dependencies array to be: [emp, local_data.gen_emp_all]",{"range":"303","text":"304"},"Update the dependencies array to be: [employee, local_data.emp_data]",{"range":"305","text":"306"},"Update the dependencies array to be: [fetchActivation]",{"range":"307","text":"308"},"Update the dependencies array to be: [fetchActivation, filterDate]",{"range":"309","text":"310"},"Update the dependencies array to be: [companies, searchQuery]",{"range":"311","text":"312"},"Update the dependencies array to be: [products, searchQuery]",{"range":"313","text":"314"},{"range":"315","text":"314"},"Update the dependencies array to be: [fetchReduction]",{"range":"316","text":"317"},"Update the dependencies array to be: [fetchReduction, filterDate]",{"range":"318","text":"319"},"Update the dependencies array to be: [fetchShipments, filterDate]",{"range":"320","text":"321"},{"range":"322","text":"321"},"Update the dependencies array to be: [init, selectedFilter]",{"range":"323","text":"324"},"Update the dependencies array to be: [init]",{"range":"325","text":"326"},"Update the dependencies array to be: [init, refresh]",{"range":"327","text":"328"},"Update the dependencies array to be: [filteredInventory, inventory, searchQuery]",{"range":"329","text":"330"},"Update the dependencies array to be: [filteredProducts, parseToken, selectedProduct]",{"range":"331","text":"332"},"Update the dependencies array to be: [employee, fetchData]",{"range":"333","text":"334"},[2028,2041],"[currentDate, getEmployeeMetrics]",[13328,13333],"[emp, local_data.gen_emp_all]",[13582,13592],"[employee, local_data.emp_data]",[659,661],"[fetchActivation]",[743,755],"[fetchActivation, filterDate]",[1364,1377],"[companies, searchQuery]",[4081,4094],"[products, searchQuery]",[1024,1037],[652,654],"[fetchReduction]",[735,747],"[fetchReduction, filterDate]",[1404,1406],"[fetchShipments, filterDate]",[1497,1509],[7018,7034],"[init, selectedFilter]",[7075,7077],"[init]",[7145,7154],"[init, refresh]",[7516,7529],"[filteredInventory, inventory, searchQuery]",[2928,2945],"[filteredProducts, parseToken, selectedProduct]",[4801,4811],"[employee, fetchData]"]